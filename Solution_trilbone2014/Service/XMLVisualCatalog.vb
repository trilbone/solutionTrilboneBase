'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.21006.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On
Imports System.Xml.Serialization
Imports Service.clsApplicationTypes
Imports Service
Imports System.Linq

Namespace Catalog

    Public Enum emCatalogType
        AllSamplesInOrder = 0
        OrderedSamplesInOrder = 1
        CancelledSamplesInOrder = 2
        SampleList = 3
    End Enum

    '
    'This source code was auto-generated by xsd, Version=4.0.21006.1.
    '

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.21006.1"), _
     System.SerializableAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True), _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="", IsNullable:=False)> _
    Partial Public Class CATALOG
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        Private lEFTPANELField As CATALOGLEFTPANEL

        Private sAMPLEField() As CATALOGSAMPLE

        Private nameField As String

        Private dateField As String

        Private titleField As String

        Private numberstringField As String


     



        ''' <summary>
        ''' возвращает результат преобразования XSLT по заданному шаблону
        ''' </summary>
        ''' <param name="TemplateName"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads Function GetHTML(TemplateName As String) As String
            If Not TemplateName = "" Then
                Return Me.TemplateManager.GetTransform(Me.GetXML, emTemplateType.CatalogHTML, TemplateName)
            Else
                Return GetHTML()
            End If
        End Function


        ''' <summary>
        ''' возвращает результат преобразования XSLT (шаблоны Service.My.Resources.XSLTCatalog)
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads Function GetHTML() As String
            Return Me.TemplateManager.GetTransform(Me.GetXML, emTemplateType.CatalogHTML)
        End Function
        ''' <summary>
        ''' записывает временный HTML файл по заданному пути
        ''' </summary>
        Public Function CreateHTMLFile(ByVal FullPath As String) As Boolean
            Return Me.TemplateManager.WriteFile(FullPath, Me.GetHTML)
        End Function

        ''' <summary>
        ''' возвращает результат преобразования. Используется с внешними шаблонами.
        ''' </summary>
        ''' <param name="TemplateType"></param>
        ''' <param name="TemplateName"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads Function GetTransform(TemplateType As emTemplateType, Optional TemplateName As String = "") As String
            Return Me.TemplateManager.GetTransform(Me.GetXML, TemplateType, TemplateName)
        End Function

        ''' <summary>
        ''' возвращает результат преобразования XSLT (шаблоны Service.My.Resources.XSLTCatalog_text)
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetTEXT() As String
            Return Me.TemplateManager.GetTransform(Me.GetXML, emTemplateType.CatalogTXT)
        End Function

        ''' <summary>
        ''' обьект левой панели
        ''' </summary>
        ''' <remarks/>
        Public Property LEFTPANEL() As CATALOGLEFTPANEL
            Get
                Return Me.lEFTPANELField
            End Get
            Set(ByVal value As CATALOGLEFTPANEL)
                Me.lEFTPANELField = value
                Me.RaisePropertyChanged("LEFTPANEL")
            End Set
        End Property

        ''' <summary>
        ''' коллекция образцов
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlElementAttribute("SAMPLE")> _
        Public Property SAMPLE() As CATALOGSAMPLE()
            Get
                Return Me.sAMPLEField
            End Get
            Set(ByVal value As CATALOGSAMPLE())
                Me.sAMPLEField = value
                Me.RaisePropertyChanged("SAMPLE")
            End Set
        End Property


        ''' <summary>
        ''' имя каталога
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set(ByVal value As String)
                Me.nameField = value
                Me.RaisePropertyChanged("name")
            End Set
        End Property

        ''' <summary>
        ''' дата создания
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property [date]() As String
            Get
                Return Me.dateField
            End Get
            Set(ByVal value As String)
                Me.dateField = value
                Me.RaisePropertyChanged("date")
            End Set
        End Property

        ''' <summary>
        ''' шапка каталога
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property title() As String
            Get
                Return Me.titleField
            End Get
            Set(ByVal value As String)
                Me.titleField = value
                Me.RaisePropertyChanged("title")
            End Set
        End Property

        ''' <summary>
        ''' предиктат номера No:
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property numberstring() As String
            Get
                Return Me.numberstringField
            End Get
            Set(ByVal value As String)
                Me.numberstringField = value
                Me.RaisePropertyChanged("numberstring")
            End Set
        End Property

        Private oTemplateManager As clsTemplateManager

        ''' <summary>
        ''' ссылка на обьект управления шаблонами
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property TemplateManager As clsTemplateManager
            Get
                If oTemplateManager Is Nothing Then
                    oTemplateManager = New clsTemplateManager
                End If
                Return oTemplateManager
            End Get
        End Property





        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="CatalogSample"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads Function AddSample(CatalogSample As CATALOGSAMPLE) As Boolean
            If Me.sAMPLEField Is Nothing Then
                Me.sAMPLEField = {CatalogSample}
            Else
                Dim _result = (From c In Me.sAMPLEField Where c.bar = CatalogSample.bar Select c).Count
                If _result > 0 Then
                    'уже есть
                    Debug.Fail("Попытка повторного добавления образца")
                Else
                    Dim _index As Integer = Me.sAMPLEField.Length
                    ReDim Preserve Me.sAMPLEField(_index)
                    Me.sAMPLEField(_index) = CatalogSample
                End If
            End If
            Return True
        End Function

        ''' <summary>
        ''' добавить образец
        ''' </summary>
        ''' <param name="bar">номер образца</param>
        ''' <param name="version">версия файла = 2</param>
        Public Overloads Function AddSample(ByVal bar As String, foldertype As Service.clsApplicationTypes.emCatalogFolderType, Optional ByVal version As String = "2") As CATALOGSAMPLE
            'If bar.Length = 0 Then Return Nothing

            Dim _sample = CATALOGSAMPLE.CreateInstance(bar, foldertype)
            Dim _result As ULong
            If ULong.TryParse(bar.Trim, _result) Then
                With _sample
                    .bar = _result
                    .version = version
                End With
            Else
                With _sample
                    .bar = 0
                    .version = version
                End With
            End If

            If Me.AddSample(_sample) Then Return _sample
            Return Nothing
        End Function

        ''' <summary>
        ''' добавить левую панель
        ''' </summary>
        ''' <param name="alt">текст пользователя</param>
        ''' <param name="sorting">сортировка true|false</param>
        ''' <param name="tagname">имя тега для создания списка</param>
        Public Function AddLeftPanelItem(ByVal alt As String, ByVal sorting As Boolean, ByVal tagname As String) As Integer
            If tagname.Length = 0 Then Return -1
            '
            If Me.lEFTPANELField Is Nothing Then
                Me.lEFTPANELField = New CATALOGLEFTPANEL

            End If

            Dim _item As New CATALOGLEFTPANELItem

            With _item
                .alt = alt
                .sorting = [sorting]
                .tagname = tagname
            End With


            Return Me.lEFTPANELField.AddItem(_item)

        End Function

        ''' <summary>
        '''ОСНОВНАЯ ФУНКЦИЯ СОЗДАНИЯ XML для ОБРАЗЦА// Создает образец для каталога и наполняет его данными из БД. Имена фото будут вынуты из требуемого устройства,либо по умолчанию из arhive.В случае указания Order будет записана цена из заказа, в противном случае - из БД. culture задает для какого языка будет создан XML/ NeedMapping вызовет форму маппинга. absolutePath = false - только имена файлов фото (иначе полные пути). foldertype - тип названия папки с фото: shot, ean13, hash
        ''' </summary>
        ''' <param name="SampleNumber"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function CreateCatalogSample(SampleNumber As Service.clsApplicationTypes.clsSampleNumber, foldertype As Service.clsApplicationTypes.emCatalogFolderType, ShowPrices As Boolean, Optional ImagesSource As clsFilesSources = Nothing, Optional ImageNamesFilter As String() = Nothing, Optional culture As System.Globalization.CultureInfo = Nothing, Optional version As String = "2", Optional NeedMapping As Boolean = False, Optional absolutePath As Boolean = False) As CATALOGSAMPLE
            '------------------------------------------------------------------------
            If ImagesSource Is Nothing Then
                ImagesSource = clsFilesSources.Arhive
            End If

            If ImagesSource.AllSources Then
                Debug.Fail("Для создания записи образца необходимо указать конкретное устройство, а не AllSources")
                ImagesSource = clsFilesSources.Arhive
            End If

            If culture Is Nothing Then
                culture = Service.clsApplicationTypes.EnglishCulture
            End If
            '------------------------------------------------------------------------
            If SampleNumber.HasExtendedInfo = False Then
                SampleNumber.GetExtendedInfo()
            End If
            '----------------------------------------
            If Not SamplePhotoObject.HasImages(SampleNumber, ImagesSource) AndAlso Not ImagesSource.Source = clsFilesSources.emSources.Arhive Then
                'копировать фотки
                Dim _res = SamplePhotoObject.CopyImagesFromSourceToSource(SampleNumber, clsFilesSources.Arhive, ImagesSource, False, , 1600)
                MsgBox("Скопировано " & _res & " фото в " & ImagesSource.ToString(), vbInformation)
            End If
            '-------------------------------
            Dim _CatalogSample = CATALOGSAMPLE.CreateInstance(SampleNumber.EAN13, foldertype)

            'загрузит из БД данные для него
            Dim _result As Integer
            Dim _sampleInfo As Service.tb_Samples_photo_data = clsApplicationTypes.SampleDataObject.GetSampleData(SampleNumber, _result)

            If Not _result = 1 Then
                'этих данных нет!!!!
                MsgBox("Данных для образца нет!", MsgBoxStyle.Critical)
                Return Nothing
            End If

            '------------------------------------------------------------------------
            '1. физические параметры образца и фоссилий
            'перебрать все записи о параметрах
            'параметры для всего образца - они одинаковы для всех фоссилий
            With _sampleInfo
                '---------------------------------------------------------------
                '1.1 номер образца
                'хеш исползуется для определения папки  на FTP
                Dim _hash = Math.Abs(SampleNumber.GetHashCode)
                Select Case culture.Name
                    Case clsApplicationTypes.RussianCulture.Name
                        _CatalogSample.AddDataElement("NUMBER", SampleNumber.ShotCode, CATALOGSAMPLEELEMENT.emPosition.down, "false", , , _hash)
                    Case clsApplicationTypes.EnglishCulture.Name
                        _CatalogSample.AddDataElement("NUMBER", SampleNumber.ShotCode, CATALOGSAMPLEELEMENT.emPosition.down, "false", , , _hash)
                    Case Else
                        Debug.Fail("operation for this culture name is missing")
                        _CatalogSample.AddDataElement("NUMBER", "", CATALOGSAMPLEELEMENT.emPosition.down, "", , , _hash)
                End Select


                '----------------------------------------------------------------
                '1.2 заголовок - название образца
                Select Case culture.Name
                    Case clsApplicationTypes.RussianCulture.Name
                        _CatalogSample.AddDataElement("NAME", .Sample_main_species, CATALOGSAMPLEELEMENT.emPosition.title, "Название", , , )
                    Case clsApplicationTypes.EnglishCulture.Name
                        _CatalogSample.AddDataElement("NAME", .Sample_main_species, CATALOGSAMPLEELEMENT.emPosition.title, "Specimen name", , , )
                    Case Else
                        Debug.Fail("operation for this culture name is missing")
                        _CatalogSample.AddDataElement("NAME", .Sample_main_species, CATALOGSAMPLEELEMENT.emPosition.title, "Specimen name", , , )
                End Select

                '--------------------------------------------------------------------
                '1.2.2 титул образца todo: найти титул
                'Dim _sourse As clsFilesSources

                'If IsNothing(OrderID) Then
                '    _sourse = clsFilesSources.CreateInstance(Service.clsApplicationTypes.clsFileSources.emSources.AllSources)
                'Else
                '    _sourse = clsFilesSources.CreateInstance(Service.clsApplicationTypes.clsFileSources.emSources.SpecificOrder, OrderID)
                'End If


                'Dim _title As String = Service.clsApplicationTypes.SamplePhotoObject.GetMainImageName(_sample, _sourse)
                'If _title.Length > 0 Then

                '    _CatalogSample.DATA(1) _
                '                .AddEnviropmentImage("image", "self", "div", "first-alt", _title)
                'End If


                '--------------------------------------------------------------------
                '1.2.3 описание происхождения todo: найти описание для главной объекта
                '------------------------------------------------------------------
                '1.3 размер матрикса
                If .Sample_length > 0 And .Sample_width > 0 Then
                    Dim _matrix As String = .Sample_length.ToString & "x" & .Sample_width
                    If Not .Sample_height = 0 Then
                        _matrix += "x" & .Sample_height
                    End If
                    Select Case culture.Name
                        Case clsApplicationTypes.RussianCulture.Name
                            _matrix += "см"
                            _CatalogSample.AddDataElement("MATRIXSIZE", _matrix, CATALOGSAMPLEELEMENT.emPosition.upperright, "Размер блока", , , )

                        Case clsApplicationTypes.EnglishCulture.Name
                            _matrix += "cm"
                            _CatalogSample.AddDataElement("MATRIXSIZE", _matrix, CATALOGSAMPLEELEMENT.emPosition.upperright, "Block size", , , )

                        Case Else
                            Debug.Fail("operation for this culture name is missing")
                            _matrix += "cm"
                            _CatalogSample.AddDataElement("MATRIXSIZE", _matrix, CATALOGSAMPLEELEMENT.emPosition.upperright, "Block size", , , )

                    End Select

                End If

                '-----------------------------------------------------------------
                '1.4 вес образца
                If .Sample_net_weight > 0 Then
                    Select Case culture.Name
                        Case clsApplicationTypes.RussianCulture.Name
                            _CatalogSample.AddDataElement("WEIGHT", .Sample_net_weight & "кг", CATALOGSAMPLEELEMENT.emPosition.upperright, "Вес образца", , , )
                        Case clsApplicationTypes.EnglishCulture.Name
                            _CatalogSample.AddDataElement("WEIGHT", .Sample_net_weight & "kg", CATALOGSAMPLEELEMENT.emPosition.upperright, "Net weight", , , )
                        Case Else
                            Debug.Fail("operation for this culture name is missing")
                            _CatalogSample.AddDataElement("WEIGHT", .Sample_net_weight & "kg", CATALOGSAMPLEELEMENT.emPosition.upperright, "Net weight", , , )
                    End Select

                End If
            End With
            '-----------------------------------------------------------------
            '1.5 размеры и названия фоссилий
            Dim _fossil1 = clsApplicationTypes.SampleDataObject.GetSampleData(SampleNumber)
            _fossil1.tb_Samples_Fossils.Load()
            Dim _index As Integer = 0

            For Each t In _fossil1.tb_Samples_Fossils
                Dim _text As String = ""
                Dim _fossilSizeText As String = ""
                _index += 1
                With t
                    'должна быть хотя бы длина фосилии
                    If .Fossil_length > 0 Then
                        '---------------
                        _fossilSizeText = .Fossil_length

                        If .Fossil_width > 0 Then
                            _fossilSizeText += "x" & .Fossil_width
                        End If

                        If .Fossil_height > 0 Then
                            _fossilSizeText += "x" & .Fossil_height
                        End If
                        '----------------
                        Select Case culture.Name
                            Case clsApplicationTypes.RussianCulture.Name
                                _fossilSizeText += "см"
                                _text = String.Format("[{1}]Размер {0}", clsApplicationTypes.FossilNamesParser({.Fossil_full_name.Trim}), IIf(t.FossilNumber.ToString.Length <= 2, t.FossilNumber.ToString, _index.ToString))
                            Case clsApplicationTypes.EnglishCulture.Name
                                _fossilSizeText += "cm"
                                _text = String.Format("[{1}]Size of {0}", clsApplicationTypes.FossilNamesParser({.Fossil_full_name.Trim}), IIf(t.FossilNumber.ToString.Length <= 2, t.FossilNumber.ToString, _index.ToString))

                            Case Else
                                Debug.Fail("operation for this culture name are missing")
                                _fossilSizeText += "cm"
                                _text = String.Format("[{1}]Size of {0}", clsApplicationTypes.FossilNamesParser({.Fossil_full_name.Trim}), IIf(t.FossilNumber.ToString.Length <= 2, t.FossilNumber.ToString, _index.ToString))
                        End Select
                        '----------
                        _CatalogSample.AddDataElement("FOSSILSIZE", _fossilSizeText, CATALOGSAMPLEELEMENT.emPosition.upperleft, _text, , , )
                    End If
                    _text = ""
                    _fossilSizeText = ""
                End With
            Next
            '---------------------------------------------------------------------------
            '1.9 описание образца
            Dim _result1 As Integer
            Dim _sons = clsApplicationTypes.SampleDataObject.GetSampleOnSale(SampleNumber, _result1)
            If _result1 > 0 Then
                With _sons
                    'новая версия с разобранным описанием 25.05.2013
                    'новая версия с маппингом от 02.02.2014
                    Dim _elements As List(Of CATALOGSAMPLEELEMENT)
                    Dim _status As Boolean
                    _elements = clsTemplateManager.DescriptionParser(.Description, culture, _status)

                    If _status = True Then
                        For Each _elem In _elements
                            _CatalogSample.AddDataElement(_elem, PreserveOrder:=False)
                        Next
                    End If
                End With
            End If
            '---------------------------------------------------------------------------
            '----------------------------------------------------------------------
            ''1.6 местонахождение образца  todo: найти название локалити
            '------------------------------------------------------------------------
            '1.8 картинки
            'получить список изображений для образца
            ''по запросу выполняем вызов из сервиса
            'если делегата нет, то сервис недоступен
            'сервис зарегестрирован - вызываем
            'ссылка на фото будет получена в зависимости от требуемого устройства
            Dim _tmpsample = SampleNumber
            Dim _images As String()
            If absolutePath Then
                'имена файлов с путями
                If ImageNamesFilter Is Nothing Then
                    _images = Service.clsApplicationTypes.SamplePhotoObject.GetImagesURI(_tmpsample, ImagesSource).Select(Function(x) x.AbsolutePath).ToArray
                Else
                    _images = Service.clsApplicationTypes.SamplePhotoObject.GetImagesURI(_tmpsample, ImagesSource, ImageNamesFilter).Select(Function(x) x.AbsolutePath).ToArray
                End If
            Else
                'только имена файлов
                If ImageNamesFilter Is Nothing Then
                    _images = Service.clsApplicationTypes.SamplePhotoObject.GetImageNamesList(_tmpsample, ImagesSource)
                Else
                    _images = Service.clsApplicationTypes.SamplePhotoObject.GetImageNamesList(_tmpsample, ImagesSource).Intersect(ImageNamesFilter).ToArray
                End If
            End If


            For Each _tmp As String In _images
                _CatalogSample.AddSampleImage(_tmp, False)
            Next

            If absolutePath Then
                If Not _CatalogSample.IMAGES Is Nothing Then
                    _CatalogSample.IMAGES.titleimage = "absolute"
                End If

            Else
                If Not _CatalogSample.IMAGES Is Nothing Then
                    _CatalogSample.IMAGES.titleimage = "relative"
                End If
            End If

            '---------------------------------------------

            '1.7 цена образца 
            If ShowPrices Then
                Dim _priceST, _discountST, _youpriceST As String
                Select Case culture.Name
                    Case clsApplicationTypes.RussianCulture.Name
                        _priceST = "Цена"
                        _discountST = "Скидка"
                        _youpriceST = "Ваша цена с учетом скидки"
                    Case clsApplicationTypes.EnglishCulture.Name
                        _priceST = "Price"
                        _discountST = "Discount"
                        _youpriceST = "Your price"

                    Case Else
                        Debug.Fail("operation for this culture name is missing")
                        _priceST = "Price"
                        _discountST = "Discount"
                        _youpriceST = "Your price"
                End Select


                Select Case ImagesSource.Source
                    Case Service.clsFilesSources.emSources.SpecificOrder
                        'пишем цену из заказа
                        _result = 0
                        Dim _order = clsApplicationTypes.SampleDataObject.GetSampleFinanceByOrder(SampleNumber, ImagesSource.Order, _result)
                        If _result = 1 Then
                            Dim _stringPrice As String
                            With _order
                                If .Price > 0 Then
                                    _stringPrice = Decimal.Parse(.Price).ToString("C", Service.clsApplicationTypes.GetCultureByCurrency(.CurrencyName))
                                    _CatalogSample.AddDataElement("PRICE", _stringPrice, CATALOGSAMPLEELEMENT.emPosition.down, _priceST, , , )

                                    If .Discount > 0 Then
                                        '-----------------------------------
                                        '1.7.1 скидка
                                        _stringPrice = (.Discount * 0.01).ToString("0%")
                                        _CatalogSample.AddDataElement("DISCOUNT", _stringPrice, CATALOGSAMPLEELEMENT.emPosition.down, _discountST, , , )

                                        '-----------------------------------
                                        '1.7.2 you price
                                        Dim _youPrice As Decimal = .Price - (.Price * (.Discount * 0.01))
                                        _stringPrice = _youPrice.ToString("C", Service.clsApplicationTypes.GetCultureByCurrency(.CurrencyName))
                                        _CatalogSample.AddDataElement("YOUPRICE", _stringPrice, CATALOGSAMPLEELEMENT.emPosition.down, _youpriceST, , , )

                                    End If
                                End If
                            End With
                        End If
                    Case Else
                        'пишем цену из БД
                        If _result = 1 Then
                            Dim _stringPrice As String
                            With SampleNumber.GetExtendedInfo.Prices
                                If .BasePrice > 0 Then
                                    _stringPrice = Decimal.Parse(.BasePrice).ToString("C", Service.clsApplicationTypes.GetCultureByCurrency(.Currency))
                                    _CatalogSample.AddDataElement("PRICE", _stringPrice, CATALOGSAMPLEELEMENT.emPosition.down, _priceST, , , )

                                    If .Discount > 0 Then
                                        '-----------------------------------
                                        '1.7.1 скидка
                                        _stringPrice = (.Discount * 0.01).ToString("0%")
                                        _CatalogSample.AddDataElement("DISCOUNT", _stringPrice, CATALOGSAMPLEELEMENT.emPosition.down, _discountST, , , )

                                        '-----------------------------------
                                        '1.7.2 you price
                                        Dim _youPrice As Decimal = .PriceWithDiscount
                                        _stringPrice = _youPrice.ToString("C", Service.clsApplicationTypes.GetCultureByCurrency(.Currency))
                                        _CatalogSample.AddDataElement("YOUPRICE", _stringPrice, CATALOGSAMPLEELEMENT.emPosition.down, _youpriceST, , , )

                                    End If
                                End If
                            End With
                        End If
                End Select
            End If
            '---------------------------------------------------------------------------
            'mapping
            If NeedMapping Then
                MsgBox("Не реализована функция вызова маппинга образца из построителя Sample")
                'Dim _fm = _CatalogSample.GetMappingForm("")

                'Dim _hdd = Sub(sender As Object, e As CATALOGSAMPLE.clsCatalogSampleChangedEventArgs)
                '               _CatalogSample = e.ChangedCatalogSample
                '           End Sub
                'AddHandler _fm.evAcceptChanges, _hdd
                '_fm.ShowDialog()
            End If

            Return _CatalogSample
        End Function


        ''' <summary>
        ''' создать каталог из записей карт XML из БД или заново из данных образца
        ''' </summary>
        ''' <param name="date"></param>
        ''' <param name="name"></param>
        ''' <param name="title"></param>
        ''' <param name="folfertype"></param>
        ''' <param name="numberstring"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads Shared Function CreateInstance(SampleList As List(Of clsApplicationTypes.clsSampleNumber), ByVal [date] As String, ByVal name As String, ByVal title As String, culture As System.Globalization.CultureInfo, ByVal folfertype As emCatalogFolderType, GetFromDB As Boolean, ShowPrices As Boolean, Optional UseFileSource As clsFilesSources = Nothing, Optional UseAbsolutePath As Boolean = False, Optional ByVal numberstring As String = "No:") As CATALOG
            If UseFileSource Is Nothing Then UseFileSource = clsFilesSources.Arhive
            Dim _catalog As CATALOG = CATALOG.CreateInstance([date], name, title, numberstring)

            Select Case GetFromDB
                Case True
                    'извлечь карты из БД
                    For Each _sm In SampleList
                        Dim _result As Integer
                        Dim _sdo = clsApplicationTypes.SampleDataObject.GetSampleOnSale(_sm, _result, CreateIfNotExist:=True)
                        If Not (_result < 1 OrElse _sdo Is Nothing) Then
                            Dim _status As Integer
                            Dim _catsm As CATALOGSAMPLE = Nothing
                            Select Case culture.Name
                                Case clsApplicationTypes.EnglishCulture.Name
                                    If Not String.IsNullOrEmpty(_sdo.SampleXMLFile) Then
                                        _catsm = CATALOGSAMPLE.ParseSample(_sdo.SampleXMLFile, _status)
                                    End If

                                Case clsApplicationTypes.RussianCulture.Name
                                    If Not String.IsNullOrEmpty(_sdo.SampleXMLFileRU) Then
                                        _catsm = CATALOGSAMPLE.ParseSample(_sdo.SampleXMLFileRU, _status)
                                    End If

                            End Select
                            If Not _catsm Is Nothing Then
                                If _status > 0 Then
                                    _catsm.SetFolderType(folfertype)
                                    If ShowPrices Then
                                        'показать цены
                                        Dim _priceST, _discountST, _youpriceST As String
                                        Select Case culture.Name
                                            Case clsApplicationTypes.RussianCulture.Name
                                                _priceST = "Цена"
                                                _discountST = "Скидка"
                                                _youpriceST = "Ваша цена с учетом скидки"
                                            Case clsApplicationTypes.EnglishCulture.Name
                                                _priceST = "Price"
                                                _discountST = "Discount"
                                                _youpriceST = "Your price"

                                            Case Else
                                                Debug.Fail("operation for this culture name is missing")
                                                _priceST = "Price"
                                                _discountST = "Discount"
                                                _youpriceST = "Your price"
                                        End Select

                                        Dim _stringPrice = Decimal.Parse(_sm.CurrentPrice.BasePrice).ToString("C", Service.clsApplicationTypes.GetCultureByCurrency(_sm.CurrentPrice.Currency))

                                        _catsm.AddDataElement("PRICE", _stringPrice, CATALOGSAMPLEELEMENT.emPosition.down, _priceST, , , )
                                        _stringPrice = (_sm.CurrentPrice.Discount * 0.01).ToString("0%")
                                        If _sm.CurrentPrice.Discount > 0 Then
                                            _catsm.AddDataElement("DISCOUNT", _stringPrice, CATALOGSAMPLEELEMENT.emPosition.down, _discountST, , , )
                                            _stringPrice = _sm.CurrentPrice.PriceWithDiscount.ToString("C", Service.clsApplicationTypes.GetCultureByCurrency(_sm.CurrentPrice.Currency))
                                            _catsm.AddDataElement("YOUPRICE", _stringPrice, CATALOGSAMPLEELEMENT.emPosition.down, _youpriceST, , , )
                                        End If

                                        _catalog.AddSample(_catsm)
                                    End If

                                Else
                                    MsgBox(String.Format("Невозможно разобрать карту образца {0} из БД. Образец не будет добавлен в каталог.", _sm.ShotCode), vbCritical)
                                End If
                            Else
                                MsgBox(String.Format("Невозможно получить карту образца {0} из БД. Для образца нет карты. Образец не будет добавлен в каталог.", _sm.ShotCode), vbCritical)
                            End If
                        Else
                            MsgBox(String.Format("Невозможно получить карту образца {0} из БД. Нет записи образца или ошибка сервера. Образец не будет добавлен в каталог.", _sm.ShotCode), vbCritical)
                        End If
                    Next
                Case Else
                    '------------------------------------------------------------------------
                    'генерация поновому из данных образца
                    'добавить данные образцов
                    For Each _sample In SampleList
                        Dim _cs As CATALOGSAMPLE = CreateCatalogSample(SampleNumber:=_sample, foldertype:=folfertype, absolutePath:=UseAbsolutePath, culture:=culture, ImagesSource:=UseFileSource, ShowPrices:=ShowPrices)
                        If Not _cs Is Nothing Then
                            _catalog.AddSample(_cs)
                        End If
                    Next
            End Select


            Return _catalog
        End Function
        ''' <summary>
        ''' создать каталог.absolutePath = false - только имена файлов фото (иначе полные пути). foldertype - тип названия папки с фото: shot, ean13, hash
        ''' </summary>
        ''' <param name="date">дата создания</param>
        ''' <param name="name">имя каталога</param>
        ''' <param name="numberstring">предиктат номера No:</param>
        ''' <param name="title">шапка каталога</param>
        Public Overloads Shared Function CreateInstance(ByVal [date] As String, ByVal name As String, ByVal title As String, Optional ByVal numberstring As String = "No:") As CATALOG
            Dim _catalog As New CATALOG

            With _catalog
                .date = [date]
                .name = name
                .numberstring = numberstring
                .title = title
                '.oTemplateManager = New clsTemplateManager
            End With

            Return _catalog

        End Function

        Protected Shared Sub ValidationEventHandler(ByVal sender As Object, ByVal e As System.Xml.Schema.ValidationEventArgs)
            MsgBox("Schema incorrect: " & e.Message)

        End Sub

        ''' <summary>
        ''' читает (разбирает) каталог из строки
        ''' </summary>
        Public Shared Function ParseCatalog(ByVal xmlString As String) As CATALOG
            If xmlString.Length = 0 Then
                MsgBox("в ReadCatalog передана пустая строка")
                Return Nothing
            End If


            Dim _catalog As CATALOG

            Dim _rdsett As New Xml.XmlReaderSettings
            Dim _xmlSerializer As Xml.Serialization.XmlSerializer = New Xml.Serialization.XmlSerializer(GetType(CATALOG))
            Dim _xmlreader As Xml.XmlReader
            Dim _strBuilt As IO.StringReader


            'schema
            'Dim _sh As New Xml.Schema.XmlSchema
            '_strBuilt = New IO.StringReader(My.Resources.XMLVisualCatalog)
            'Dim _xmlsh = New Xml.Schema.XmlSchemaSet()
            '_xmlsh.Add(Xml.Schema.XmlSchema.Read(_strBuilt, AddressOf ValidationEventHandler))

            'catalog
            _strBuilt = New IO.StringReader(xmlString)

            With _rdsett
                .CloseInput = True
                .IgnoreComments = True
                '.Schemas = _xmlsh
            End With

            _xmlreader = Xml.XmlReader.Create(_strBuilt, _rdsett)
            _catalog = _xmlSerializer.Deserialize(_xmlreader)
            _xmlreader.Close()
            Try


            Catch ex As Exception
                MsgBox("Can't read xml: " & ex.Message)

                Return Nothing

            End Try


            Return _catalog

        End Function

        ''' <summary>
        ''' возвращает строку xml
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetXML() As String

            Dim _wrsett As New Xml.XmlWriterSettings
            Dim _xmlSerializer As Xml.Serialization.XmlSerializer
            Dim _xmlwriter As Xml.XmlWriter
            Dim _strBuilt As New System.Text.StringBuilder

            _xmlSerializer = New Xml.Serialization.XmlSerializer(GetType(CATALOG))
            With _wrsett
                .Encoding = System.Text.Encoding.GetEncoding("windows-1251")
                .Indent = True
            End With

            _xmlwriter = Xml.XmlWriter.Create(_strBuilt, _wrsett)
            _xmlSerializer.Serialize(_xmlwriter, Me)
            _xmlwriter.Flush()
            _xmlwriter.Close()


            Return _strBuilt.ToString

        End Function
      
       


        ''' <summary>
        ''' создает файл с xml (html) данными по заданому пути
        ''' </summary>
        ''' <param name="FullPath"></param>
        ''' <param name="xmlData"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Private Shared Function CreateTmpFile(ByVal FullPath As String, ByVal xmlData As String) As Boolean
            Try
                Dim _dir = IO.Path.GetDirectoryName(FullPath)

                If Not IO.Directory.Exists(_dir) Then
                    IO.Directory.CreateDirectory(_dir)
                End If
            Catch ex As Exception
                MsgBox("по указанному пути запись файла не возможна")
                Return False
            End Try

            Dim _dc As New Xml.XmlDocument
            _dc.LoadXml(xmlData)
            _dc.Save(FullPath)
            Return True

        End Function
       


        ''' <summary>
        ''' возвращает результат преобразования. Используется с внешними шаблонами.
        ''' </summary>
        Private Overloads Function GetTransform(ByVal XSLTstring As String) As String
            'xslt transform block
            'Create a new XslTransform object.
            Dim _xslt As New Xml.Xsl.XslCompiledTransform

            Dim _strreader As IO.StringReader
            Dim _xsl_reader As Xml.XmlReader

            Dim _xmlReader As Xml.XmlReader = Xml.XmlReader.Create(New IO.StringReader(Me.GetXML))
            Dim _wrsett As New Xml.XmlWriterSettings
            Dim _xmlwriter As Xml.XmlWriter
            Dim _strBuilt As New System.Text.StringBuilder

            With _wrsett
                .Encoding = System.Text.Encoding.GetEncoding("windows-1251")
                .Indent = True
            End With
            _xmlwriter = Xml.XmlWriter.Create(_strBuilt, _wrsett)
            '-----------------
            'шаблон XSLTString
            Dim _xsltSettings As Xml.Xsl.XsltSettings = Xml.Xsl.XsltSettings.TrustedXslt
            Dim resolver As New Xml.XmlUrlResolver()
            _strreader = New IO.StringReader(XSLTstring)
            _xsl_reader = Xml.XmlReader.Create(_strreader)
            _xslt.Load(_xsl_reader, _xsltSettings, resolver)

            'трансформация каталога
            _xslt.Transform(_xmlReader, _xmlwriter)

            _xmlwriter.Flush()
            _xmlwriter.Close()
            _xsl_reader.Close()
            _strreader.Close()

            Return _strBuilt.ToString
        End Function
      

      

        Public Overrides Function ToString() As String
            Return name
        End Function


    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.21006.1"),
     System.SerializableAttribute(),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code"),
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
    Partial Public Class CATALOGLEFTPANEL
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        Private itemField() As CATALOGLEFTPANELItem

        Private visibleField As Boolean

        ''' <summary>
        ''' коллекция элементов левой панели
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlElementAttribute("item")>
        Public Property item() As CATALOGLEFTPANELItem()
            Get
                Return Me.itemField
            End Get
            Set(ByVal value As CATALOGLEFTPANELItem())
                Me.itemField = value
                Me.RaisePropertyChanged("item")
            End Set
        End Property

        ''' <summary>
        ''' включить/выключить панель
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property visible() As Boolean
            Get
                Return Me.visibleField
            End Get
            Set(ByVal value As Boolean)
                Me.visibleField = value
                Me.RaisePropertyChanged("visible")
            End Set
        End Property

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Public Function AddItem(ByVal item As CATALOGLEFTPANELItem) As Integer
            If Me.itemField Is Nothing Then
                Me.itemField = {item}
                Return 0
            Else
                Dim _index As Integer = Me.itemField.Length
                ReDim Preserve Me.itemField(_index)

                Me.itemField(_index) = item
                Return _index
            End If

        End Function
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.21006.1"),
     System.SerializableAttribute(),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code"),
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
    Partial Public Class CATALOGLEFTPANELItem
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        Private tagnameField As String

        Private sortingField As Boolean

        Private altField As String

        ''' <summary>
        ''' имя тега для создания списка
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property tagname() As String
            Get
                Return Me.tagnameField
            End Get
            Set(ByVal value As String)
                Me.tagnameField = value
                Me.RaisePropertyChanged("tagname")
            End Set
        End Property

        ''' <summary>
        ''' сортировка true|false
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property sorting() As Boolean
            Get
                Return Me.sortingField
            End Get
            Set(ByVal value As Boolean)
                Me.sortingField = value
                Me.RaisePropertyChanged("sorting")
            End Set
        End Property

        ''' <summary>
        ''' текст пользователя
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property alt() As String
            Get
                Return Me.altField
            End Get
            Set(ByVal value As String)
                Me.altField = value
                Me.RaisePropertyChanged("alt")
            End Set
        End Property

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub


    End Class

    ''' <summary>
    ''' Описывает образец
    ''' </summary>
    ''' <remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.21006.1"),
     System.SerializableAttribute(),
      System.ComponentModel.DesignerCategoryAttribute("code"),
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
    Partial Public Class CATALOGSAMPLE
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        Private dATAField() As CATALOGSAMPLEELEMENT

        Private iMAGESField As CATALOGSAMPLEIMAGES

        Private barField As ULong

        Private versionField As Byte
        Dim rOOTINFOField As CATALOGSAMPLEROOTINFO

        Public Class clsCatalogSampleChangedEventArgs
            Inherits EventArgs

            Public ChangedCatalogSample As CATALOGSAMPLE

        End Class

        Public Sub MappingReady_EventHandler(sender As Object, e As clsCatalogSampleChangedEventArgs)
            RaiseEvent MappingChanged(sender, e)
        End Sub

        ''' <summary>
        ''' коллекция данных образца
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlArrayItemAttribute("ELEMENT", IsNullable:=False)>
        Public Property DATA() As CATALOGSAMPLEELEMENT()
            Get
                Return Me.dATAField
            End Get
            Set(ByVal value As CATALOGSAMPLEELEMENT())
                Me.dATAField = value
                Me.RaisePropertyChanged("DATA")
            End Set
        End Property

        Public Function GetTransform(TemplateType As emTemplateType, Optional TemplateName As String = "") As String
            Select Case TemplateType
                Case emTemplateType.Site_mail_template, emTemplateType.eBay_Nordstar_txt, emTemplateType.ByName
                    Dim _manager = New clsTemplateManager
                    Return _manager.GetTransform(Me.GetXML, TemplateType, TemplateName)
                Case Else
                    Debug.Fail("запрошен неверный тип шаблона. преобразование невозможно")
                    Return ""
            End Select
        End Function

        ' ''' <summary>
        ' ''' веренет обьект номера образца(если нет, то Nothing)
        ' ''' </summary>
        ' ''' <value></value>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public ReadOnly Property SampleNumber As Service.clsApplicationTypes.clsSampleNumber
        '    Get

        '        Return Service.clsApplicationTypes.clsSampleNumber.CreateFromString(Me.bar)
        '    End Get
        'End Property

        ''' <summary>
        ''' описанеи типа материала для образца
        ''' </summary>
        Public Property ROOTINFO() As CATALOGSAMPLEROOTINFO
            Get
                Return Me.rOOTINFOField
            End Get
            Set(ByVal value As CATALOGSAMPLEROOTINFO)
                Me.rOOTINFOField = value
                Me.RaisePropertyChanged("ROOTINFO")
            End Set
        End Property


        ''' <summary>
        ''' обьект коллекции изображений образца
        ''' </summary>
        ''' <remarks/>
        Public Property IMAGES() As CATALOGSAMPLEIMAGES
            Get
                Return Me.iMAGESField
            End Get
            Set(ByVal value As CATALOGSAMPLEIMAGES)
                Me.iMAGESField = value
                Me.RaisePropertyChanged("IMAGES")
            End Set
        End Property

        ''' <summary>
        ''' номер образца EAN13
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property bar() As ULong
            Get
                Return Me.barField
            End Get
            Set(ByVal value As ULong)
                Me.barField = value
                Me.RaisePropertyChanged("bar")
            End Set
        End Property



        ''' <summary>
        ''' версия файла
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property version() As Byte
            Get
                Return Me.versionField
            End Get
            Set(ByVal value As Byte)
                Me.versionField = value
                Me.RaisePropertyChanged("version")
            End Set
        End Property

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Public Event MappingChanged(sender As Object, e As EventArgs)


        ''' <summary>
        ''' добавить тег данных
        ''' </summary>
        ''' <param name="alt">этот текст будет выведен подчеркнутым перед значением элемента</param>
        ''' <param name="border">0|1 очертить границу блока вместе с окружением</param>
        ''' <param name="borderSpecified">включить/выключить границу</param>
        ''' <param name="hash">хеш-код элемента</param>
        ''' <param name="name">имя элемента</param>
        ''' <param name="position">
        ''' upperright|upperleft|down|title
        ''' позиция вывода блока: слева до картинок|справа до картинок|после картинок(по умолчанию)| как название (заголовок)
        ''' </param>
        ''' <param name="data">содержание элемента (сами данные)</param>
        Public Overloads Function AddDataElement(ByVal name As String, ByVal data As String, ByVal position As CATALOGSAMPLEELEMENT.emPosition, Optional ByVal alt As String = "", Optional ByVal border As Boolean = False, Optional ByVal borderSpecified As Boolean = False, Optional ByVal hash As Integer = 0) As CATALOGSAMPLEELEMENT
            'удаление повторных элементов - совместимость со старыми картами в БД
            Select Case name
                Case "PRICE"
                    Dim _result = (From c In Me.dATAField Where c.name.Equals(name)).FirstOrDefault
                    If Not _result Is Nothing Then
                        Me.RemoveDataElement(_result)
                    End If
                Case "DISCOUNT"
                    Dim _result = (From c In Me.dATAField Where c.name.Equals(name)).FirstOrDefault
                    If Not _result Is Nothing Then
                        Me.RemoveDataElement(_result)
                    End If
                Case "YOURPRICE"
                    Dim _result = (From c In Me.dATAField Where c.name.Equals(name)).FirstOrDefault
                    If Not _result Is Nothing Then
                        Me.RemoveDataElement(_result)
                    End If
            End Select

            Dim _data = CATALOGSAMPLEELEMENT.CreateDataElement(name, data, position, alt, border, borderSpecified, hash)
            Me.AddDataElement(_data)
            Return _data
        End Function
        ''' <summary>
        ''' вернет индекс/ если задать PreserveOrder то будет сохранено поле Order, иначе оно будет изменено на индекс.
        ''' </summary>
        ''' <param name="DataElement"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads Function AddDataElement(ByVal DataElement As CATALOGSAMPLEELEMENT, Optional PreserveOrder As Boolean = False) As Integer
            '30.07.2015 перевод имени в верхн регистр
            DataElement.name = DataElement.name.ToUpper

            If Me.dATAField Is Nothing Then
                If Not PreserveOrder Then
                    DataElement.order = 1
                End If
                Me.DATA = {DataElement}
                Return 0
            Else
                If Not PreserveOrder Then
                    Dim _order = (From c In Me.dATAField Let _res As Integer = 0 Let _re2 = Integer.TryParse(c.order, _res) Where String.Compare(c.position, DataElement.position, True) = 0 And _re2 = True Select Integer.Parse(c.order))
                    If _order.Count = 0 Then
                        DataElement.order = 1
                    Else
                        DataElement.order = _order.Max() + 1
                    End If
                End If



                Dim _index As Integer = Me.dATAField.Length
                ReDim Preserve Me.dATAField(_index)

                Me.DATA(_index) = DataElement
                Return _index
            End If
        End Function

        Public Function RemoveDataElement(dataelement As CATALOGSAMPLEELEMENT) As Boolean
            Dim _result = From c In Me.dATAField Where (Not c.Equals(dataelement)) Select c
            If _result.Count = dATAField.Count Then Return False
            Me.DATA = _result.ToArray
            Return True
        End Function


        Private Sub New()

        End Sub
        Public Shared Function CreateInstance(SampleNumber As String, foldertype As Service.clsApplicationTypes.emCatalogFolderType, Optional version As String = "2") As CATALOGSAMPLE
            Dim _sn = Service.clsApplicationTypes.clsSampleNumber.CreateFromString(SampleNumber)
            If Not _sn.CodeIsCorrect Then Return New CATALOGSAMPLE
            Dim _new As New CATALOGSAMPLE
            _new.bar = _sn.EAN13
            _new.version = version
            _new.SetFolderType(foldertype)
            Return _new
        End Function
       

      

        '''   <summary>
        '''   задает тип папки изображений в каталоге shot,ean13,hash
        '''   </summary>
        '''   <returns></returns>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        <System.ComponentModel.DefaultValueAttribute("shot")>
        Public Property imagefoldertype As String
            Get
                Return imagefoldertypeField
            End Get
            Set(value As String)
                imagefoldertypeField = value
            End Set
        End Property

        Private imagefoldertypeField As String

        '''   <summary>
        '''   задаст тип папки фото образцов для каталога
        '''   </summary>
        '''   <param name="foldertype"></param>
        Public Sub SetFolderType(foldertype As Service.clsApplicationTypes.emCatalogFolderType)
            Dim _name = [Enum].GetName(GetType(Service.clsApplicationTypes.emCatalogFolderType), foldertype)
            Me.imagefoldertype = _name
        End Sub

        ''' <summary>
        ''' вернуть xml конкретного образца (тег SAMPLE с содержимым)
        ''' </summary>
        Public Function GetXML() As String
            Dim _wrsett As New Xml.XmlWriterSettings
            Dim _xmlSerializer As Xml.Serialization.XmlSerializer
            Dim _xmlwriter As Xml.XmlWriter
            Dim _strBuilt As New System.Text.StringBuilder

            _xmlSerializer = New Xml.Serialization.XmlSerializer(Me.GetType)

            With _wrsett
                .Encoding = System.Text.Encoding.GetEncoding("windows-1251")
                .Indent = True
            End With
            Try
                _xmlwriter = Xml.XmlWriter.Create(_strBuilt, _wrsett)
                _xmlSerializer.Serialize(_xmlwriter, Me)
                _xmlwriter.Flush()
                _xmlwriter.Close()


            Catch ex As Exception
                MsgBox("Ошибка преобразования XML " & ex.Message, vbCritical)
                Return ""
            End Try

            Return _strBuilt.ToString

        End Function

        ''' <summary>
        ''' добавит тег ROOTINFO
        ''' </summary>
        ''' <param name="id"></param>
        ''' <param name="caption"></param>
        ''' <param name="textfield"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function SetRootInfo(id As String, caption As String, textfield As String) As CATALOGSAMPLEROOTINFO

            Me.ROOTINFO = CATALOGSAMPLEROOTINFO.CreateInstance(id, caption, textfield)
            Return Me.ROOTINFO
        End Function




        ''' <summary>
        ''' добавить изображение
        ''' </summary>
        ''' <param name="src">имя файла</param>
        ''' <param name="IsTiltleImage">установить это фото титулом</param>
        Public Function AddSampleImage(ByVal src As String, ByVal IsTiltleImage As Boolean) As Integer
            If Me.iMAGESField Is Nothing Then
                Me.IMAGES = New CATALOGSAMPLEIMAGES
            End If

            Dim _image As New CATALOGSAMPLEIMAGESIMAGE
            _image.src = src
            If IsTiltleImage Then
                Me.IMAGES.SetTitleImage(src)
            End If
            Return Me.IMAGES.AddImage(_image)
        End Function

        Public Function RemoveSampleImage(ByVal src As String, ByVal IsTiltleImage As Boolean) As Integer
            If Me.iMAGESField Is Nothing Then
                Return 0
            End If
            If IsTiltleImage Then
                If Me.IMAGES.RemoveTitleImage(src) Then
                    Return 1
                Else
                    Return 0
                End If
            End If
            Return Me.IMAGES.RemoveImage(src)
        End Function


        ''' <summary>
        ''' вернет список src фоток
        ''' </summary>
        ''' <param name="TitleImageSrc"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetSampleImages(Optional ByRef TitleImageSrc As String = "") As List(Of String)
            If Me.IMAGES Is Nothing Then Return New List(Of String)
            TitleImageSrc = Me.IMAGES.titleimage

            Dim _result = (From c In Me.IMAGES.IMAGE Select c.src).ToList

            Return _result

        End Function



        Public Overrides Function ToString() As String
            Return bar
        End Function

        ''' <summary>
        ''' читает (разбирает) образец каталога из строки. Status >0 = ok
        ''' </summary>
        Public Shared Function ParseSample(ByVal xmlString As String, ByRef _status As Integer) As CATALOGSAMPLE
            If xmlString.Length = 0 Then
                _status = -1
                'MsgBox("в ParseSample передана пустая строка")
                Return Nothing
            End If

            Dim _catalogSample As CATALOGSAMPLE
            Dim _rdsett As New Xml.XmlReaderSettings
            Dim _xmlSerializer As Xml.Serialization.XmlSerializer = New Xml.Serialization.XmlSerializer(GetType(CATALOGSAMPLE))
            Dim _xmlreader As Xml.XmlReader
            Dim _strBuilt As IO.StringReader


            'schema
            'Dim _sh As New Xml.Schema.XmlSchema
            '_strBuilt = New IO.StringReader(My.Resources.XMLVisualCatalog)
            'Dim _xmlsh = New Xml.Schema.XmlSchemaSet()
            '_xmlsh.Add(Xml.Schema.XmlSchema.Read(_strBuilt, AddressOf ValidationEventHandler))

            'catalog
            _strBuilt = New IO.StringReader(xmlString)

            With _rdsett
                .CloseInput = True
                .IgnoreComments = True
                '.Schemas = _xmlsh
            End With


            Try
                _xmlreader = Xml.XmlReader.Create(_strBuilt, _rdsett)
                _catalogSample = _xmlSerializer.Deserialize(_xmlreader)
                _xmlreader.Close()

            Catch ex As Exception
                MsgBox("Can't read xml: " & ex.Message)
                _status = -1
                Return Nothing

            End Try

            _status = 1
            Return _catalogSample

        End Function

        Private volumeField As String


    End Class

    ''' <summary>
    ''' описывает элемент описания образца
    ''' </summary>
    ''' <remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.21006.1"),
     System.SerializableAttribute(),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code"),
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
    Partial Public Class CATALOGSAMPLEELEMENT
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        Implements IComparable

        Private eNVIRONMENTField As CATALOGSAMPLEELEMENTENVIRONMENT

        Private textField As String

        Private hashField As String

        Private nameField As String

        Private orderField As String

        Private altField As String

        Private positionField As String

        Private borderField As Byte

        Private underlineField As Boolean
        ''' <summary>
        ''' позиция вывода блока: upperright|upperleft|down|title( слева до картинок|справа до картинок|после картинок(по умолчанию)| как название (заголовок))
        ''' </summary>
        ''' <remarks></remarks>
        Public Enum emPosition
            ''' <summary>
            ''' справа  до картинок
            ''' </summary>
            ''' <remarks></remarks>
            upperright = 2
            ''' <summary>
            ''' слева до картинок
            ''' </summary>
            ''' <remarks></remarks>
            upperleft = 1
            ''' <summary>
            ''' после картинок(по умолчанию)
            ''' </summary>
            ''' <remarks></remarks>
            down = 3
            ''' <summary>
            ''' как название (заголовок)
            ''' </summary>
            ''' <remarks></remarks>
            title = 0
            ''' <summary>
            ''' перед down
            ''' </summary>
            ''' <remarks></remarks>
            info = 4

        End Enum
        Dim mAPField As CATALOGELEMENTMAP

        ''' <summary>
        ''' создать тег данных
        ''' </summary>
        ''' <param name="name">имя элемента</param>
        ''' <param name="data">содержание элемента (сами данные)</param>
        ''' <param name="position">позиция вывода блока: upperright|upperleft|down|title( слева до картинок|справа до картинок|после картинок(по умолчанию)| как название (заголовок))</param>
        ''' <param name="alt">этот текст будет выведен подчеркнутым перед значением элемента</param>
        ''' <param name="border">очертить границу блока вместе с окружением</param>
        ''' <param name="underline">подчеркивание шрифта</param>
        ''' <param name="hash">хеш-код элемента</param>
        ''' <param name="order">порядок вывода тега (по умолчанию вывод по последовательности тегов в файле)</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function CreateDataElement(ByVal name As String, ByVal data As String, ByVal position As emPosition, Optional ByVal alt As String = "", Optional ByVal border As Boolean = False, Optional ByVal underline As Boolean = False, Optional ByVal hash As Integer = 0, Optional ByVal order As Integer = 0) As CATALOGSAMPLEELEMENT

            ' ''' <param name="border">0|1 очертить границу блока вместе с окружением</param>
            ' ''' <param name="borderSpecified">включить/выключить границу</param>
            ' ''' <param name="position">
            ' ''' upperright|upperleft|down|title|info
            ' ''' позиция вывода блока: слева до картинок|справа до картинок|после картинок(по умолчанию)| как название (заголовок)

            Dim _data As New CATALOGSAMPLEELEMENT
            With _data
                .alt = alt
                If border Then
                    .border = "1"
                Else
                    .border = "0"
                End If

                .underline = underline

                'Для элемента NUMBER хеш исползуется для определения папки  на FTP  задается как модуль хеша строки EAN13 clsSampleNumber.GetHashCode!!! Отличается от реализации по умолчанию!!!
                If hash = 0 Then
                    .hash = .GetHashCode
                Else
                    .hash = hash
                End If


                .name = name
                .order = order
                .position = [Enum].GetName(GetType(emPosition), position)

                .Text = data
            End With

            Return _data
        End Function


        ''' <summary>
        ''' обьект окружения (описания) для этого элемента данных
        ''' </summary>
        ''' <remarks/>
        Public Property ENVIRONMENT() As CATALOGSAMPLEELEMENTENVIRONMENT
            Get
                Return Me.eNVIRONMENTField
            End Get
            Set(ByVal value As CATALOGSAMPLEELEMENTENVIRONMENT)
                Me.eNVIRONMENTField = value
                Me.RaisePropertyChanged("ENVIRONMENT")
            End Set
        End Property

        ''' <summary>
        ''' содержание элемента (сами данные)
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlTextAttribute()>
        Public Property Text() As String
            Get
                Return Me.textField
            End Get
            Set(ByVal value As String)
                Me.textField = value
                Me.RaisePropertyChanged("Text")
            End Set
        End Property

        ''' <summary>
        ''' хеш-код элемента
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property hash() As String
            Get
                Return Me.hashField
            End Get
            Set(ByVal value As String)
                Me.hashField = value
                Me.RaisePropertyChanged("hash")
            End Set
        End Property

        ''' <summary>
        ''' имя элемента
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set(ByVal value As String)
                Me.nameField = value
                Me.RaisePropertyChanged("name")
            End Set
        End Property

        ''' <summary>
        ''' порядок вывода тега (по умолчанию вывод по последовательности тегов в файле)
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property order() As String
            Get
                Return Me.orderField
            End Get
            Set(ByVal value As String)
                Me.orderField = value
                Me.RaisePropertyChanged("order")
            End Set
        End Property

        ''' <summary>
        ''' этот текст будет выведен подчеркнутым перед значением элемента
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property alt() As String
            Get
                Return Me.altField
            End Get
            Set(ByVal value As String)
                Me.altField = value
                Me.RaisePropertyChanged("alt")
            End Set
        End Property

        ''' <summary>
        ''' upperright|upperleft|down|title
        ''' </summary>
        ''' <remarks>позиция вывода блока: слева до картинок|справа до картинок|после картинок(по умолчанию)| как название (заголовок)</remarks>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property position() As String
            Get
                Return Me.positionField
            End Get
            Set(ByVal value As String)
                Me.positionField = value
                Me.RaisePropertyChanged("position")
            End Set
        End Property

        ''' <summary>
        ''' 0|1 очертить границу блока вместе с окружением
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property border() As Byte
            Get
                Return Me.borderField
            End Get
            Set(ByVal value As Byte)
                Me.borderField = value
                Me.RaisePropertyChanged("border")
            End Set
        End Property

        ''' <summary>
        ''' включить/выключить границу
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property underline() As Boolean
            Get
                Return Me.underlineField
            End Get
            Set(ByVal value As Boolean)
                Me.underlineField = value
                Me.RaisePropertyChanged("underline")
            End Set
        End Property

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub




        Friend Overloads Sub SetElementMAP(map As CATALOGELEMENTMAP)
            Me.mAPField = map
        End Sub

        ''' <summary>
        ''' записать мап для элемента
        ''' </summary>
        ''' <param name="id"></param>
        ''' <param name="href"></param>
        ''' <param name="textfield"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Friend Overloads Function SetElementMAP(id As String, href As String, textfield As String) As CATALOGELEMENTMAP
            Me.mAPField = CATALOGELEMENTMAP.CreateInstance(id, href, textfield)
            Return Me.mAPField
        End Function
        'Public Overloads Function AddElementMAP(id As String, href As String, pointhref As String, dx As Integer, dy As Integer, textfield As String, Optional articul As String = "", Optional showarrow As Boolean = True) As Integer
        '    Dim _data = CATALOGELEMENTMAP.CreateInstance(id, href, dx, dy, textfield, articul, showarrow)
        '    Return AddElementMAP(_data)
        'End Function

        'Public Overloads Function AddElementMAP(ByVal ElementMAP As CATALOGELEMENTMAP) As Integer
        '    If Me.mAPField Is Nothing Then
        '        Me.eLEMENTMAPField = {ElementMAP}
        '        Return 0
        '    Else
        '        Dim _index As Integer = Me.eLEMENTMAPField.Length
        '        ReDim Preserve Me.eLEMENTMAPField(_index)

        '        Me.eLEMENTMAPField(_index) = ElementMAP
        '        Return _index
        '    End If
        'End Function


        ' ''' <summary>
        ' ''' добавить описание к тегу данных
        ' ''' </summary>
        ' ''' <param name="href">ссылка на внешний источник</param>
        'Public Sub CreateEnviropment(ByVal href As String)
        '    Dim _enviropment As New CATALOGSAMPLEELEMENTENVIRONMENT
        '    With _enviropment
        '        .href = href
        '    End With

        '    Me.eNVIRONMENTField = _enviropment


        'End Sub

        ''' <summary>
        ''' добавить изображение описания
        ''' </summary>
        ''' <param name="alt">подпись для лузера</param>
        ''' <param name="from">источник картинки self(в папке изображений образца)|catalog(папка данных в каталоге)</param>
        ''' <param name="layout">способ вывода картинки div(в плавающем окошке)|inline(вместе с содержимым)</param>
        ''' <param name="position">
        ''' позиция размещения   first-alt|first|after|upon
        ''' до вывода alt элемента(по умолчанию)|до содержания элемента|после содержания элемента|над содержанием(только div)
        ''' </param>
        ''' <param name="src">URI картинки</param>
        ''' <param name="href">URI гиперссылки на ресурс окружения</param>
        Public Function AddEnviropmentImage(ByVal alt As String, ByVal from As String, ByVal layout As String, ByVal position As String, ByVal src As String, Optional ByVal href As String = "", Optional caption As String = "", Optional type As CATALOGSAMPLEELEMENTENVIRONMENT.emEnviropmentType = CATALOGSAMPLEELEMENTENVIRONMENT.emEnviropmentType.pdf) As Integer

            If Me.ENVIRONMENT Is Nothing Then
                Me.AddEnviropment(href, type, caption)
            End If

            Dim _image As New CATALOGSAMPLEELEMENTENVIRONMENTIMAGE
            With _image
                .alt = alt
                .from = from
                .layout = layout
                .position = position
                .src = src
            End With

            Return Me.ENVIRONMENT.AddImage(_image)


        End Function

        ''' <summary>
        ''' добавить элемент окружения. href - ссылка на ресурс окружения
        ''' </summary>
        ''' <param name="href">URI</param>
        Public Function AddEnviropment(ByVal href As String, caption As String, type As CATALOGSAMPLEELEMENTENVIRONMENT.emEnviropmentType) As CATALOGSAMPLEELEMENTENVIRONMENT
            Dim _en = New CATALOGSAMPLEELEMENTENVIRONMENT
            _en.href = href
            _en.type = type
            _en.Text = {caption}
            Me.ENVIRONMENT = _en
            Return _en
        End Function
        ''' <summary>
        ''' графическая карта элемента образца
        ''' </summary>
        Public Property MAP() As CATALOGELEMENTMAP
            Get
                Return mAPField
            End Get
            Set(value As CATALOGELEMENTMAP)
                mAPField = value
                Me.RaisePropertyChanged("MAP")
            End Set
        End Property

        Public Overrides Function ToString() As String
            Return name
        End Function

        Public Overrides Function Equals(obj As Object) As Boolean
            If obj Is Nothing Then Return False
            If Not TypeOf obj Is CATALOGSAMPLEELEMENT Then Return False
            If Not Me.GetHashCode = obj.GetHashCode Then Return False
            Return True
        End Function

        Public Overrides Function GetHashCode() As Integer
            'Для элемента NUMBER хеш исползуется для определения папки  на FTP  задается как модуль хеша строки EAN13 clsSampleNumber.GetHashCode!!! Отличается от этой реализации!!!
            If altField Is Nothing Then altField = ""
            If textField Is Nothing Then textField = ""
            If nameField Is Nothing Then nameField = ""
            Return nameField.GetHashCode Xor textField.GetHashCode Xor altField.GetHashCode
        End Function

        Public Function CompareTo(obj As Object) As Integer Implements System.IComparable.CompareTo
            If obj Is Nothing Then Return 0
            If Not TypeOf obj Is CATALOGSAMPLEELEMENT Then Return 0
            Dim _obj = CType(obj, CATALOGSAMPLEELEMENT)
            Dim _mePosition As emPosition
            Dim _objPosition As emPosition

            If [Enum].TryParse(Of emPosition)(Me.position, _mePosition) Then
                If [Enum].TryParse(Of emPosition)(_obj.position, _objPosition) Then
                    'compare position
                    If _mePosition = _objPosition Then
                        'сравнить Order
                        Dim _meorder As Integer
                        Dim _objorder As Integer
                        If Integer.TryParse(Me.order, _meorder) Then
                            If Integer.TryParse(_obj.order, _objorder) Then
                                Return _meorder.CompareTo(_objorder)
                            Else
                                Return 0
                            End If
                        Else
                            Return 0
                        End If

                    Else
                        Return _mePosition.CompareTo(_objPosition)
                    End If

                Else
                    Return 0
                End If
            Else
                Return 0
            End If


        End Function
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.21006.1"),
     System.SerializableAttribute(),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code"),
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
    Partial Public Class CATALOGSAMPLEELEMENTENVIRONMENT
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        Private iMAGEField() As CATALOGSAMPLEELEMENTENVIRONMENTIMAGE

        Private hrefField As String



        Public Enum emEnviropmentType
            jpg
            gif
            pdf
            html
            xml
            text
        End Enum
        Dim typeField As CATALOGSAMPLEELEMENTENVIRONMENT.emEnviropmentType

        ''' <summary>
        ''' коллекция изображений для этого описания
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlElementAttribute("IMAGE")>
        Public Property IMAGE() As CATALOGSAMPLEELEMENTENVIRONMENTIMAGE()
            Get
                Return Me.iMAGEField
            End Get
            Set(ByVal value As CATALOGSAMPLEELEMENTENVIRONMENTIMAGE())
                Me.iMAGEField = value
                Me.RaisePropertyChanged("IMAGE")
            End Set
        End Property
        ''' <summary>
        ''' тип вложения (отобразится как ссылка)
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property type() As emEnviropmentType
            Get
                Return Me.typeField
            End Get
            Set(ByVal value As emEnviropmentType)
                Me.typeField = value
                Me.RaisePropertyChanged("type")
            End Set
        End Property


        ''' <summary>
        ''' ссылка на внешний источник
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property href() As String
            Get
                Return Me.hrefField
            End Get
            Set(ByVal value As String)
                Me.hrefField = value
                Me.RaisePropertyChanged("href")
            End Set
        End Property

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub



        ''' <summary>
        ''' добавить изображение описания
        ''' </summary>
        Public Function AddImage(ByVal image As CATALOGSAMPLEELEMENTENVIRONMENTIMAGE) As Integer
            If Me.iMAGEField Is Nothing Then
                Me.iMAGEField = {image}
                Return 0
            Else
                Dim _index As Integer = Me.iMAGEField.Length
                ReDim Preserve Me.iMAGEField(_index)

                Me.iMAGEField(_index) = image
                Return _index
            End If


        End Function

        ''' <summary>
        ''' заголовок графической карты
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlTextAttribute()>
        Public Property Text() As String()
            Get
                Return Me.textField
            End Get
            Set(ByVal value As String())
                Me.textField = value
                Me.RaisePropertyChanged("Text")
            End Set
        End Property


        Private textField() As String
        ''' <summary>
        ''' вернет ссылку
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overrides Function ToString() As String
            Return href
        End Function

    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.21006.1"),
     System.SerializableAttribute(),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code"),
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
    Partial Public Class CATALOGSAMPLEELEMENTENVIRONMENTIMAGE
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        Private srcField As String

        Private fromField As String

        Private layoutField As String

        Private altField As String

        Private positionField As String

        ''' <summary>
        ''' fileName
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property src() As String
            Get
                Return Me.srcField
            End Get
            Set(ByVal value As String)
                Me.srcField = value
                Me.RaisePropertyChanged("src")
            End Set
        End Property

        ''' <summary>
        ''' источник картинки self(в папке изображений образца)|catalog(папка данных в каталоге)
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property from() As String
            Get
                Return Me.fromField
            End Get
            Set(ByVal value As String)
                Me.fromField = value
                Me.RaisePropertyChanged("from")
            End Set
        End Property

        ''' <summary>
        ''' способ вывода картинки div(в плавающем окошке)|inline(вместе с содержимым)
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property layout() As String
            Get
                Return Me.layoutField
            End Get
            Set(ByVal value As String)
                Me.layoutField = value
                Me.RaisePropertyChanged("layout")
            End Set
        End Property

        ''' <summary>
        ''' подпись для лузера
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property alt() As String
            Get
                Return Me.altField
            End Get
            Set(ByVal value As String)
                Me.altField = value
                Me.RaisePropertyChanged("alt")
            End Set
        End Property

        ''' <summary>
        ''' позиция размещения   first-alt|first|after|upon
        ''' </summary>
        ''' <remarks>до вывода alt элемента(по умолчанию)|до содержания элемента|после содержания элемента|над содержанием(только div)</remarks>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property position() As String
            Get
                Return Me.positionField
            End Get
            Set(ByVal value As String)
                Me.positionField = value
                Me.RaisePropertyChanged("position")
            End Set
        End Property

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.21006.1"),
     System.SerializableAttribute(),
          System.ComponentModel.DesignerCategoryAttribute("code"),
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
    Partial Public Class CATALOGSAMPLEIMAGES
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        Private iMAGEField() As CATALOGSAMPLEIMAGESIMAGE

        Private titleimageField As String

        ''' <summary>
        ''' коллекция изображений образца
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlElementAttribute("IMAGE")>
        Public Property IMAGE() As CATALOGSAMPLEIMAGESIMAGE()
            Get
                Return Me.iMAGEField
            End Get
            Set(ByVal value As CATALOGSAMPLEIMAGESIMAGE())
                Me.iMAGEField = value
                Me.RaisePropertyChanged("IMAGE")
            End Set
        End Property

        ''' <summary>
        ''' титульное изображение образца
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property titleimage() As String
            Get
                Return Me.titleimageField
            End Get
            Set(ByVal value As String)
                Me.titleimageField = value
                Me.RaisePropertyChanged("titleimage")
            End Set
        End Property

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Public Function RemoveImage(src As String) As Integer
            Dim _result = From c In Me.iMAGEField Where (Not IO.Path.GetFileName(c.src) = src) Select c
            If _result.Count = iMAGEField.Count Then Return False
            Me.IMAGE = _result.ToArray
            Return True
        End Function

        ''' <summary>
        ''' сдвинуть фото вверх в массиве
        ''' </summary>
        ''' <param name="src"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function MoveImageIndexUp(src As String) As Boolean
            Dim _index As Integer = -1
            Dim _item As CATALOGSAMPLEIMAGESIMAGE = Nothing
            For i = 0 To Me.iMAGEField.Length - 1
                If IO.Path.GetFileName(Me.iMAGEField(i).src) = src Then
                    _index = i
                    _item = Me.iMAGEField(i)
                    Exit For
                End If
            Next
            If _item Is Nothing Then Return False
            If _index = Me.iMAGEField.Length - 1 Then Return False
            Dim _moved = Me.iMAGEField(_index + 1)
            Me.iMAGEField(_index + 1) = _item
            Me.iMAGEField(_index) = _moved
            Return True
        End Function

        ''' <summary>
        ''' сдвинуть фото вниз в массиве
        ''' </summary>
        ''' <param name="src"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function MoveImageIndexDown(src As String) As Boolean
            Dim _index As Integer = -1
            Dim _item As CATALOGSAMPLEIMAGESIMAGE = Nothing
            For i = 0 To Me.iMAGEField.Length - 1
                If IO.Path.GetFileName(Me.iMAGEField(i).src) = src Then
                    _index = i
                    _item = Me.iMAGEField(i)
                    Exit For
                End If
            Next
            If _item Is Nothing Then Return False
            If _index = 0 Then Return False

            Dim _moved = Me.iMAGEField(_index - 1)
            Me.iMAGEField(_index - 1) = _item
            Me.iMAGEField(_index) = _moved
            Return True
        End Function

        Public Function AddImage(ByVal image As CATALOGSAMPLEIMAGESIMAGE) As Integer
            If Me.iMAGEField Is Nothing Then
                Me.iMAGEField = {image}
                Return 0
            Else
                Dim _index As Integer = Me.iMAGEField.Length
                ReDim Preserve Me.iMAGEField(_index)

                Me.iMAGEField(_index) = image
                Return _index
            End If

        End Function
        Public Function SetTitleImage(ByVal src As String) As Boolean
            If src.Length > 0 Then
                Me.titleimage = src
                Return True
            End If
            Return False
        End Function

        Public Function RemoveTitleImage(ByVal src As String) As Boolean
            If src.Length > 0 Then
                Me.titleimage = ""
                Return True
            End If
            Return False
        End Function

        Public Overrides Function ToString() As String
            Dim _out As String = ""
            If Not (titleimage Is Nothing OrElse titleimage = "") Then
                _out += "Title: " & titleimage
            End If
            If Not (Me.IMAGE Is Nothing OrElse Me.IMAGE.Count = 0) Then
                _out += " Images: "
                For Each _img In IMAGE
                    _out += _img.src & ", "
                Next
                _out.TrimEnd(", ")
            End If
            Return _out
        End Function

    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.21006.1"),
     System.SerializableAttribute(),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code"),
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
    Partial Public Class CATALOGSAMPLEIMAGESIMAGE
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        Private srcField As String





        ''' <summary>
        ''' имя файла
        ''' </summary>
        ''' <remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property src() As String
            Get
                Return Me.srcField
            End Get
            Set(ByVal value As String)
                Me.srcField = value
                Me.RaisePropertyChanged("src")
            End Set
        End Property

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Public Overrides Function ToString() As String
            Return src
        End Function
    End Class
End Namespace
'------------------------------------------------------------------------------
' <auto-generated>
'     Этот код создан программой.
'     Исполняемая версия:4.0.30319.34209
'
'     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
'     повторной генерации кода.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System.Xml.Serialization
Imports System.Globalization

'
'Этот исходный код был создан с помощью xsd, версия=4.0.30319.33440.
'
Namespace Nop.Plugin.Misc.panoRazziRestService

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.33440"), _
     System.SerializableAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True), _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="", IsNullable:=False)> _
    Partial Public Class LangObject
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        Implements IComparable
        Implements IComparer


        Private itemField() As LangObjItem
        Protected oNameGroupField As String
        Private invariantvalueField As String

#Region "nop propirties"
        ''' <summary>
        ''' ID обьекта в БД NopComm
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <System.Xml.Serialization.XmlElementAttribute("ObjectId")> _
        Public Property ObjectId As Integer = 0
        ''' <summary>
        ''' ID привязки продукта к обьекту в БД NopComm
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <System.Xml.Serialization.XmlElementAttribute("ProductObjectId")> _
        Public Property ProductObjectId As Integer = 0

        <System.Xml.Serialization.XmlElementAttribute("DisplayOrder")> _
        Public Property DisplayOrder As Integer = 0

        <System.Xml.Serialization.XmlElementAttribute("IsFeaturedProduct")> _
        Public Property IsFeaturedProduct As Boolean = False
#End Region


        <XmlIgnore>
        Property ItemLangObjInter() As IlangObjItem()
            Get
                Return ItemLangObj
            End Get
            Set(value As IlangObjItem())
                ItemLangObj = value
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute("Item")> _
        Public Property ItemLangObj() As LangObjItem()
            Get
                Return Me.itemField
            End Get
            Set(value As LangObjItem())
                Me.itemField = value
                Me.RaisePropertyChanged("Item")
            End Set
        End Property

        ''' <summary>
        ''' имя группы, к которой принадлежит обьект
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <System.Xml.Serialization.XmlAttributeAttribute("GroupName")> _
        Public Property _groupName() As String
            Get
                Return Me.oNameGroupField
            End Get
            Set(value As String)
                Me.oNameGroupField = value
                Me.RaisePropertyChanged("InvariantGroupName")
            End Set
        End Property



        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute("InvariantValue")> _
        Public Property InvariantValue() As String
            Get
                Return Me.invariantvalueField
            End Get
            Set(value As String)
                Me.invariantvalueField = value
                Me.RaisePropertyChanged("invariantvalue")
            End Set
        End Property

        Private Function ContainsInter(obj As IlangObjItem) As Boolean
            Return Contains(obj)
        End Function

        Public Function Contains(obj As LangObjItem) As Boolean
            If Me.ItemLangObj.Contains(obj) Then Return True
            Return False
        End Function

        Public Overloads Function CreateInstanceInter(groupName As String, Optional invariantValue As String = "") As IlangObject
            Return CreateInstance(groupName, invariantValue)
        End Function

        Public Overloads Function CreateInstanceinter(groupName As String, invariantValue As String, Optional EnValue As String = "", Optional ruValue As String = "") As IlangObject
            Return CreateInstance(groupName, invariantValue, EnValue, ruValue)
        End Function


        ''' <summary>
        ''' создает обьект, инициализируя все необходимые поля
        ''' </summary>
        ''' <param name="groupName"></param>
        ''' <param name="invariantValue"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads Shared Function CreateInstance(groupName As String, Optional invariantValue As String = "") As LangObject
            Dim _new = New LangObject
            _new.ItemLangObj = New LangObjItem() {}
            _new._groupName = groupName
            If Not invariantValue = "" Then
                _new.AddItem(New LangObjItem With {.lang = lng.invariant, .Value = invariantValue})
                _new.InvariantValue = invariantValue
            End If
            Return _new
        End Function

        Public Overloads Shared Function CreateInstance(groupName As String, invariantValue As String, Optional EnValue As String = "", Optional ruValue As String = "") As LangObject
            Dim _new = New LangObject
            _new.ItemLangObj = New LangObjItem() {}
            _new._groupName = groupName
            If invariantValue = "" Then Return Nothing
            _new.AddItem(New LangObjItem With {.lang = lng.invariant, .Value = invariantValue})
            _new.AddItem(New LangObjItem With {.lang = lng.ruRU, .Value = ruValue})
            _new.AddItem(New LangObjItem With {.lang = lng.enUS, .Value = EnValue})
            _new.InvariantValue = invariantValue
            Return _new
        End Function


        Private Sub AddItemInter(obj As IlangObjItem)
            AddItem(obj)
        End Sub

        Public Overloads Sub AddItem(lang As lng, value As String)
            Dim _new As New LangObjItem With {.lang = lang, .Value = value}
            AddItem(_new)
        End Sub

        Public Shared Function GetLangByCulture(culture As CultureInfo) As lng
            Select Case culture.Name
                Case "en-US"
                    Return lng.enUS
                Case "ru-RU"
                    Return lng.ruRU
                Case Else
                    MsgBox(String.Format("Культура {0} не может быть обработана. Данные будут помещены в культуру en-US", culture.Name), vbCritical)
                    Return lng.enUS
            End Select
        End Function

        ''' <summary>
        ''' добавит значение
        ''' </summary>
        ''' <param name="obj"></param>
        ''' <remarks></remarks>
        Public Overloads Sub AddItem(obj As LangObjItem)
            'ограничение на наличие инварианта
            If obj.lang = lng.invariant And Me.Contains(lng.invariant) Then
                Debug.Fail(String.Format("Попытка добавить еще одно инвариантное значение к {0}", Me.ToString))
                Return
            End If
            Dim _tmp As New List(Of LangObjItem)
            'сохранить старые
            If ItemLangObj Is Nothing Then
                ItemLangObj = _tmp.ToArray
            End If
            For Each t In ItemLangObj
                _tmp.Add(t)
            Next
            If Me.GetInvariantItem Is Nothing Then
                If Not obj.lang = lng.invariant Then
                    'добавить инвариант
                    _tmp.Add(New LangObjItem With {.lang = lng.invariant, .Value = obj.Value})
                    Me.InvariantValue = obj.Value
                Else
                    'добавить значение инварианта, сам обьект будет добавлен ниже
                    Me.InvariantValue = obj.Value
                End If
                ItemLangObj = _tmp.ToArray
            Else
                If Me.GetInvariantItem.Value = "" Then
                    Debug.Fail("Попытка использовать пустое нивариантное значение")
                    Me.GetInvariantItem.Value = obj.Value
                    Me.InvariantValue = obj.Value
                End If
            End If

            'добавить новый
            _tmp.Add(obj)
            Me.ItemLangObj = _tmp.ToArray
            RaisePropertyChanged("Count")
        End Sub

        ''' <summary>
        ''' установит значение выбранного языка как инвариантное
        ''' </summary>
        ''' <param name="lang"></param>
        ''' <remarks></remarks>
        Public Sub SetAsInvariant(lang As lng)
            If lang = lng.invariant Then Return
            If Me.Count(lang) <= 0 Then Return

            Dim _inv = Me.GetInvariantItem
            'изменить инвариант
            Me.InvariantValue = Me.langValue(lang)
            _inv.Value = Me.langValue(lang)
        End Sub
        ''' <summary>
        ''' число языковых записей
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads Function Count() As Integer
            If Me.ItemLangObj Is Nothing Then Return -1
            Return Me.ItemLangObj.Length
        End Function
        ''' <summary>
        ''' число языковых записей конкретного языка
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads Function Count(lang As lng) As Integer
            If Me.ItemLangObj Is Nothing Then Return -1
            Return Me.ItemLangObj.Count(Function(x) x.lang = lang)
        End Function
        ''' <summary>
        ''' есть ли запись для языка -1=пустой массив
        ''' </summary>
        ''' <param name="lang"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function Contains(lang As lng) As Boolean
            If Me.ItemLangObj Is Nothing Then Return False
            If Me.ItemLangObj.FirstOrDefault(Function(x) x.lang = lang) Is Nothing Then Return False
            Return True
        End Function

        Public Function RemoveItemInter(obj As IlangObjItem) As Boolean
            Return RemoveItem(obj)
        End Function

        Public Function RemoveItem(obj As LangObjItem) As Boolean
            Dim _tmp As New List(Of LangObjItem)
            Dim _result As Boolean = False
            For Each t In ItemLangObj
                If Not t.Equals(obj) Then
                    _tmp.Add(t)
                Else
                    _result = True
                End If
            Next
            Me.ItemLangObj = _tmp.ToArray
            RaisePropertyChanged("Count")
            Return _result
        End Function

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub


        ''' <summary>
        ''' выводит значения элемента инвариант, либо атрибута инвариант, либо base.tostring
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overrides Function ToString() As String
            If Not Me.ItemLangObj Is Nothing Then
                If Me.Contains(lng.invariant) Then
                    Return Me.GetInvariantItem.Value
                End If
            End If
            If Not Me.oNameGroupField = "" Then
                Return "(group): " & Me.oNameGroupField
            End If
            Return MyBase.ToString
        End Function


        Protected Function GetInvariantItemInter() As IlangObjItem
            Return GetInvariantItem()
        End Function

        ''' <summary>
        ''' вспомогательная функция
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Protected Friend Function GetInvariantItem() As LangObjItem
            Dim _res = (From c In Me.ItemLangObj Where c.lang = lng.invariant Select c).FirstOrDefault
            Return _res
        End Function

        'Protected Function GetLangValue(lang As lng) As String Implements IlangObject.GetLangValue
        '    Dim _res = (From c In Me.ItemLangObj Where c.lang = lang Select c).FirstOrDefault
        '    If _res Is Nothing Then Return ""
        '    Return _res.Value
        'End Function

        Public Overrides Function Equals(obj As Object) As Boolean
            If obj Is Nothing Then Return False
            If Not TypeOf obj Is LangObject Then Return False

            Dim _obj = CType(obj, LangObject)
            If _obj.ItemLangObj Is Nothing Then Return False
            If Me.ItemLangObj Is Nothing Then Return False
            If _obj.GetInvariantItem Is Nothing Then Return False
            If Me.GetInvariantItem Is Nothing Then Return False

            If Not _obj._groupName.ToLower.Equals(Me._groupName.ToLower) Then Return False
            If Not CType(obj, LangObject).GetInvariantItem.Equals(Me.GetInvariantItem) Then Return False

            Return True
        End Function

        Public Overrides Function GetHashCode() As Integer
            If Me.GetInvariantItem Is Nothing Then Return MyBase.GetHashCode
            Return Me.GetInvariantItem.GetHashCode Xor _groupName.ToLower.GetHashCode
        End Function

        ''' <summary>
        ''' получит/установит значение для языка. 
        ''' </summary>
        ''' <param name="lang"></param>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property langValue(lang As lng) As String
            Get
                If Me.ItemLangObj Is Nothing Then Return Me.InvariantValue
                Dim _result = (From c In Me.ItemLangObj Where c.lang = lang Select c.Value).FirstOrDefault
                If _result Is Nothing Then _result = Me.InvariantValue
                Return _result
            End Get

            Set(value As String)
                If Not Me.ItemLangObj Is Nothing Then
                    Dim _result = (From c In Me.ItemLangObj Where c.lang = lang Select c).FirstOrDefault
                    If Not _result Is Nothing Then
                        _result.Value = value
                        Return
                    End If
                End If
                'add specific item
                Dim _new = New LangObjItem
                With _new
                    .lang = lang
                    .Value = value
                End With
                Me.AddItem(_new)
            End Set
        End Property

        ''' <summary>
        ''' вернет хмл с переданным именет тега
        ''' </summary>
        ''' <param name="TagName">имя тега</param>
        Public Overridable Function GetXML(TagName As String, ItemTagName As String, Optional includeInvariantValueAttribute As Boolean = False, Optional includeGroupNameAttribute As Boolean = False, Optional TypeAttributeValue As String = "") As String
            Dim _xml As XElement = New XElement(TagName)
            If Not TypeAttributeValue = "" Then
                _xml.Add(New XAttribute("type", TypeAttributeValue))
            End If
            If includeGroupNameAttribute Then
                _xml.Add(New XAttribute("invariantname", Me._groupName))
            End If
            If includeInvariantValueAttribute Then
                _xml.Add(New XAttribute("invariantvalue", Me.InvariantValue))
                Dim _result = (From c In Me.ItemLangObj Where c.lang = lng.invariant Select c).FirstOrDefault
                If Not _result Is Nothing Then
                    If Not _result.Value = Me.InvariantValue Then
                        MsgBox(String.Format("Значение для инвариантного языка будет исправлено с {0} на {1}, поскольку {1}, как поисковое имя, должно совпадать со значением для инвариантного языка.", _result.Value, Me.InvariantValue))
                        _result.Value = Me.InvariantValue
                    End If
                End If
            End If

            For Each t In Me.ItemLangObj
                _xml.Add(XElement.Parse(t.GetXML(ItemTagName)))
            Next

            Return _xml.ToString
        End Function

        Public Function CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
            If obj Is Nothing Then Return 0
            If Not TypeOf obj Is LangObject Then Return 0
            Dim _obj = CType(obj, LangObject)
            If Me.ItemLangObj Is Nothing Then Return 0
            If Me.ItemLangObj Is Nothing Then Return 0

           
            If _obj.GetInvariantItem Is Nothing Then Return 0
            If Me.GetInvariantItem Is Nothing Then Return 0

            Return Me.GetInvariantItem.Value.CompareTo(_obj.GetInvariantItem.Value)

            'If Not _obj._groupName.ToLower.Equals(Me._groupName.ToLower) Then Return False
            'If Not CType(obj, LangObject).GetInvariantItem.Equals(Me.GetInvariantItem) Then Return False
        End Function

        Public Function Compare(x As Object, y As Object) As Integer Implements IComparer.Compare
            If x Is Nothing Then Return 0
            If Not TypeOf x Is LangObject Then Return 0
            If y Is Nothing Then Return 0
            If Not TypeOf y Is LangObject Then Return 0
            Dim _objx = CType(x, LangObject)
            Dim _objy = CType(y, LangObject)
            Return _objx.CompareTo(_objy)
        End Function
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.33440"), _
     System.SerializableAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)> _
    Partial Public Class LangObjItem
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        Private langField As lng

        Private valueField As String

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property lang() As lng
            Get
                Return Me.langField
            End Get
            Set(value As lng)
                Me.langField = value
                Me.RaisePropertyChanged("lang")
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlTextAttribute()> _
        Public Property Value() As String
            Get
                Return Me.valueField
            End Get
            Set(value As String)
                Me.valueField = value
                Me.RaisePropertyChanged("Value")
            End Set
        End Property

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Public Overrides Function ToString() As String
            Return Me.Value
        End Function

        Public Overrides Function Equals(obj As Object) As Boolean
            If obj Is Nothing Then Return False
            If Not TypeOf obj Is LangObjItem Then Return Nothing
            If CType(obj, LangObjItem).lang = Me.lang Then
                If CType(obj, LangObjItem).Value.ToLower.Equals(Me.Value.ToLower) Then Return True
            End If
            Return False
        End Function

        Public Overrides Function GetHashCode() As Integer
            Return Me.lang.GetHashCode Xor Me.Value.ToLower.GetHashCode
        End Function

        ''' <summary>
        ''' Вернет XML с переданным тегом
        ''' </summary>
        ''' <param name="TagName">имя тега</param>
        Public Function GetXML(TagName As String) As String
            Dim _xml As XElement = New XElement(TagName, Me.Value)
            Select Case Me.lang
                Case lng.enUS
                    _xml.Add(New XAttribute("lang", "en-US"))
                Case lng.ruRU
                    _xml.Add(New XAttribute("lang", "ru-RU"))
                Case lng.invariant
                    _xml.Add(New XAttribute("lang", "invariant"))
                Case Else
                    Throw New ArgumentException("Параметр не может быть обработан", "lng")
                    Return ""
            End Select


            Return _xml.ToString
        End Function
    End Class


    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.33440"), _
   System.SerializableAttribute(), _
   System.ComponentModel.DesignerCategoryAttribute("code"), _
   System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)> _
    Public Class clsLangObjectCollection
        Inherits List(Of LangObject)
        Implements System.ComponentModel.INotifyPropertyChanged

        Protected oCollectionName As String
        ''' <summary>
        ''' установить название коллекции по первому элементу
        ''' </summary>
        ''' <remarks></remarks>
        Public Sub SetCollectionNameByFirstItem()
            If Me.Count = 0 Then Return
            Me.oCollectionName = Me.Item(0)._groupName
        End Sub

        ''' <summary>
        ''' группа = одинакова для всех обьектов коллекции
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable ReadOnly Property _collectionName As String
            Get
                Return oCollectionName
            End Get
        End Property
        ''' <summary>
        ''' CollectionName определяет, что могут быть добавлены элементы с GroupName=CollectionName (можно взять из любого добавляемого обьекта)
        ''' </summary>
        ''' <param name="CollectionName"></param>
        ''' <param name="base"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads Shared Function CreateInstance(CollectionName As String, base As IEnumerable(Of LangObject)) As clsLangObjectCollection
            If String.IsNullOrEmpty(CollectionName) Then
                Debug.Fail("Необходимо указать имя коллекции")
                Return Nothing
            End If
            Dim _new = New clsLangObjectCollection
            _new.oCollectionName = CollectionName
            For Each t In base
                t._groupName = CollectionName
                _new.Add(t)
            Next
            Return _new
        End Function
        ''' <summary>
        ''' CollectionName определяет, что могут быть добавлены элементы с GroupName=CollectionName
        ''' </summary>
        ''' <param name="CollectionName"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overloads Shared Function CreateInstance(CollectionName As String) As clsLangObjectCollection
            If String.IsNullOrEmpty(CollectionName) Then
                Debug.Fail("Необходимо указать имя коллекции")
                Return Nothing
            End If
            Dim _new = New clsLangObjectCollection
            _new.oCollectionName = CollectionName
            Return _new
        End Function

        Private Function VerifyLangObject(ByRef item As LangObject) As Boolean
            If item.InvariantValue = "" Then
                If item.GetInvariantItem Is Nothing Then
                    Dim _res = item.ItemLangObj.FirstOrDefault(Function(x) Not String.IsNullOrEmpty(x.Value))
                    If _res Is Nothing Then
                        'попытка добавить обьект без инвариантного значения и с пустым списком значений
                        MsgBox(String.Format("Попытка добавить обьект {0} без инвариантного значения и с пустым списком значений в коллекцию {1}. Обьект не будет добавлен.", item.ToString, oCollectionName), vbCritical)
                        Return False
                    End If
                Else
                    item.InvariantValue = item.GetInvariantItem.Value
                End If
            End If
            Return True
        End Function


        ''' <summary>
        ''' в коллекцию добавляются только однотипные обьекты по _groupName
        ''' </summary>
        ''' <param name="item"></param>
        ''' <remarks></remarks>
        Shadows Sub Add(item As LangObject)
            'требуется для работы десериализатора
            'If String.IsNullOrEmpty(_collectionName) Then
            '    Debug.Fail("Необходимо указать имя группы для коллекции обьектов")
            'End If
            'If Not item._groupName = oCollectionName Then
            '    MsgBox(String.Format("Имя группы {0} не совпадает с именем коллекции {1}", item._groupName, oCollectionName), vbCritical)
            '    Return
            'End If
            If Me.VerifyLangObject(item) Then
                MyBase.Add(item)
            End If
            RaisePropertyChanged("Count")
        End Sub
        ''' <summary>
        '''  в коллекцию добавляются только однотипные обьекты по _groupName
        ''' </summary>
        ''' <param name="collection"></param>
        ''' <remarks></remarks>
        Shadows Sub AddRange(collection As IEnumerable(Of LangObject))
            If String.IsNullOrEmpty(_collectionName) Then
                Debug.Fail("Необходимо указать имя группы")
            End If
            Dim _toAdd As New List(Of LangObject)
            For Each t In collection
                If Not t._groupName = oCollectionName Then
                    MsgBox(String.Format("Имя группы одного из элементов {0} не совпадает с именем коллекции {1}", t._groupName, oCollectionName), vbCritical)
                    Return
                End If
                If Me.VerifyLangObject(t) Then
                    _toAdd.Add(t)
                End If
            Next
            MyBase.AddRange(_toAdd)
            RaisePropertyChanged("Count")
        End Sub

        Public Function GetLangValues(lang As lng) As List(Of String)
            If Me.Count = 0 Then Return New List(Of String)
            Dim _result As New List(Of String)
            If lang = lng.invariant Then
                _result = (From c In Me Select c.InvariantValue).ToList
            Else
                Dim _out As New List(Of String)
                For Each t In Me
                    Dim _res = (From c In t.ItemLangObj Where c.lang = lang Select c.Value).FirstOrDefault
                    If Not _res = "" Then
                        _out.Add(_res)
                    End If
                Next
                _result = _out
            End If
            Return _result
        End Function


        ' ''' <summary>
        ' ''' вернет список значений языка
        ' ''' </summary>
        ' ''' <returns></returns>
        ' ''' <remarks></remarks>
        'Public Function GetValues() As List(Of String)
        '    If Me.Count = 0 Then Return New List(Of String)
        '    Dim _result As New List(Of String)
        '    If DefaultLang = lng.invariant Then
        '        _result = (From c In Me Select c.invariantvalue).ToList
        '    Else
        '        Dim _out As New List(Of String)
        '        For Each t In Me
        '            Dim _res = (From c In t.Item Where c.lang = DefaultLang Select c.Value).FirstOrDefault
        '            If Not _res = "" Then
        '                _out.Add(_res)
        '            End If
        '        Next
        '        _result = _out
        '    End If
        '    Return _result
        'End Function
        ''' <summary>
        ''' вернет XML для конкретного языка invariant - все значения
        ''' </summary>
        ''' <param name="TagName"></param>
        ''' <param name="rootTagName"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetLangXML(lang As lng, rootTagName As String, TagName As String) As String
            Dim _xml = New XElement(rootTagName)
            Select Case lang
                Case lng.enUS
                    _xml.Add(New XAttribute("lang", "en-US"))
                Case lng.ruRU
                    _xml.Add(New XAttribute("lang", "ru-RU"))
                Case lng.invariant
                    _xml.Add(New XAttribute("lang", "invariant"))
                Case Else
                    Throw New ArgumentException("Параметр не может быть обработан", "lng")
                    Return ""
            End Select

            For Each t In Me.GetLangValues(lang)
                _xml.Add(New XElement(TagName, t.ToString))
            Next
            Return _xml.ToString
        End Function

        Public Overridable Function GetXML(RootTagName As String, TagName As String, ItemTagName As String, Optional includeInvariantValueAttribute As Boolean = False, Optional includeInvariantNameAttribute As Boolean = False, Optional TypeAttributeValue As String = "") As String
            Dim _xml As XElement = New XElement(RootTagName)
            For Each t In Me
                _xml.Add(XElement.Parse(t.GetXML(TagName, ItemTagName, includeInvariantValueAttribute, includeInvariantNameAttribute, TypeAttributeValue)))
            Next
            Return _xml.ToString
        End Function


        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        ''' <summary>
        ''' установит значение выбранного языка как инвариантное для всех членов списка
        ''' </summary>
        ''' <param name="lang"></param>
        ''' <remarks></remarks>
        Public Overridable Sub SetAsInvariant(lang As lng)
            Me.ForEach(Sub(x) x.SetAsInvariant(lang))
        End Sub

        Public Event PropertyChanged(sender As Object, e As ComponentModel.PropertyChangedEventArgs) Implements ComponentModel.INotifyPropertyChanged.PropertyChanged
    End Class

End Namespace

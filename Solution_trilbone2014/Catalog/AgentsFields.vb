'------------------------------------------------------------------------------
' <auto-generated>
'     Этот код создан программой.
'     Исполняемая версия:4.0.30319.18444
'
'     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
'     повторной генерации кода.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System.Xml.Serialization
Imports System.Linq
'
'This source code was auto-generated by xsd, Version=4.0.30319.1.
'
Namespace Trilbone
    
    ''' <summary>
    ''' управляет списком доступных агентов и их аккаунтов. Подготавливает данные для выставления. Также управляет загрузкой файла с данными агентов.
    ''' </summary>
    ''' <remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1"), _
     System.SerializableAttribute(), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True), _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="", IsNullable:=False)> _
    Partial Public Class AUCTIONAGENT
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute("AGENT")> _
        Public Property AGENT() As AUCTIONDATAAGENT()

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property version As UInteger

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged


        ''' <summary>
        ''' список доступных агенту аккаунтов
        ''' </summary>
        ''' <param name="AgentName">имя агента, например, eBay</param>
        <Xml.Serialization.XmlIgnoreAttribute> _
        Public ReadOnly Property AccountListByAgentName(AgentName As String) As List(Of String)
            Get
                If Me.AGENT Is Nothing Then Return New List(Of String)

                Dim _result = (From c In Me.AGENT Where c.name = AgentName Select c.account).ToList

                Return _result

            End Get

        End Property

     


        ''' <summary>
        ''' Список доступных агентов из файла
        ''' </summary>
        <Xml.Serialization.XmlIgnoreAttribute> _
        Public Overloads ReadOnly Property AgentAccountLoginList As List(Of String)
            Get
                If Me.AGENT Is Nothing Then Return New List(Of String)
                Dim _result = From c In Me.AGENT Select c.account

                Return _result.ToList
            End Get

        End Property




        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        ''' <summary>
        ''' пересчитает шиппинг из евро в доллары
        ''' </summary>
        Public Function CalculateEuroAmontByRate(amountInEUR As Decimal) As Decimal
            Return Math.Round(amountInEUR * RequestEURRate(), 2)
        End Function

        ''' <summary>
        ''' сосхранить файл агентов
        ''' </summary>
        ''' <remarks></remarks>
        Public Sub SaveAgentsFile()
            'save file
            Dim _path = IO.Path.Combine(oManager.TemplatePath, My.Settings.AgentFileName)
            IO.File.WriteAllText(_path, Me.GetXML)
        End Sub


        ''
        ''' <summary>
        ''' читает файл настроек аукционов
        ''' </summary>
        ''' <param name="manager"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function CreateInstance(manager As clsTemplateManager) As AUCTIONAGENT
            Dim _path = IO.Path.Combine(manager.TemplatePath, My.Settings.AgentFileName)
            Dim _out As New AUCTIONAGENT(manager)
            If IO.File.Exists(_path) Then
                'read template file
                Dim _s = IO.File.ReadAllText(_path)
                _out = AUCTIONAGENT.ParseAgentFile(_s)
            Else
                Return Nothing
            End If
            Return _out
        End Function

        Private oManager As clsTemplateManager

        Public Sub New()

        End Sub

        Private Sub New(manager As clsTemplateManager)
            oManager = manager
        End Sub

        ''' <summary>
        ''' читает (разбирает) каталог из строки
        ''' </summary>
        Private Shared Function ParseAgentFile(ByVal xmlString As String) As AUCTIONAGENT
            If xmlString.Length = 0 Then
                MsgBox("001. В ReadAUCTIONAGENT передана пустая строка")
                Return Nothing
            End If


            Dim _AUCTIONAGENT As AUCTIONAGENT

            Dim _rdsett As New Xml.XmlReaderSettings
            Dim _xmlSerializer As Xml.Serialization.XmlSerializer = New Xml.Serialization.XmlSerializer(GetType(AUCTIONAGENT))
            Dim _xmlreader As Xml.XmlReader
            Dim _strBuilt As IO.StringReader


            'schema
            Dim _sh As New Xml.Schema.XmlSchema
            _strBuilt = New IO.StringReader(My.Resources.AgentsFields)
            Dim _xmlsh = New Xml.Schema.XmlSchemaSet()
            _xmlsh.Add(Xml.Schema.XmlSchema.Read(_strBuilt, AddressOf ValidationEventHandler))

            'catalog
            _strBuilt = New IO.StringReader(xmlString)

            With _rdsett
                .CloseInput = True
                .IgnoreComments = True
                .Schemas = _xmlsh
            End With

            _xmlreader = Xml.XmlReader.Create(_strBuilt, _rdsett)
            _AUCTIONAGENT = _xmlSerializer.Deserialize(_xmlreader)
            _xmlreader.Close()
            Try


            Catch ex As Exception
                MsgBox("002. Не могу прочитать XML: " & ex.Message)

                Return Nothing

            End Try


            Return _AUCTIONAGENT

        End Function
        Protected Shared Sub ValidationEventHandler(ByVal sender As Object, ByVal e As System.Xml.Schema.ValidationEventArgs)
            MsgBox("003. Schema incorrect: " & e.Message)

        End Sub

        ''' <summary>
        ''' возвращает строку xml
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Private Function GetXML() As String

            Dim _wrsett As New Xml.XmlWriterSettings
            Dim _xmlSerializer As Xml.Serialization.XmlSerializer
            Dim _xmlwriter As Xml.XmlWriter
            Dim _strBuilt As New System.Text.StringBuilder

            _xmlSerializer = New Xml.Serialization.XmlSerializer(GetType(AUCTIONAGENT))
            With _wrsett
                .Encoding = System.Text.Encoding.GetEncoding("windows-1251")
                .Indent = True
            End With

            _xmlwriter = Xml.XmlWriter.Create(_strBuilt, _wrsett)
            _xmlSerializer.Serialize(_xmlwriter, Me)
            _xmlwriter.Flush()
            _xmlwriter.Close()


            Return _strBuilt.ToString

        End Function

        ''' <summary>
        ''' запросит курс у интернет сервиса курсов
        ''' </summary>
        Public Function RequestEURRate() As Decimal
            Return My.Settings.RateEURUSD
        End Function


    End Class

    ''' <summary>
    ''' Управляет отдельным item для его оформления на аккаунт агента
    ''' </summary>
    ''' <remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1"), _
     System.SerializableAttribute(), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)> _
    Partial Public Class AUCTIONDATAAGENT
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute("FIELD")> _
        Public Property FIELD() As AUCTIONDATAAGENTFIELD()

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property requestURI As String

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property AgentImageUploadURI As String

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property token As String

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property passwd As String


        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property name As String

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property account As String

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property [date] As String

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged


        Private oAgentParameters As clsAgentEbayParameters

        <System.Xml.Serialization.XmlIgnoreAttribute> _
Public Property AgentParameters As clsAgentEbayParameters
            Get
                Return oAgentParameters
            End Get
            Set(value As clsAgentEbayParameters)
                oAgentParameters = value
            End Set
        End Property















































































































        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub



















































    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1"), _
     System.SerializableAttribute(), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)> _
    Partial Public Class AUCTIONDATAAGENTFIELD
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute("ITEM")> _
        Public Property ITEM() As AUCTIONDATAAGENTFIELDITEM()

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property name As String

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property datatype As String

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property requered As Boolean

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property agentIDDataType As String

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Public Function AddItem(newitem As AUCTIONDATAAGENTFIELDITEM) As Integer
            If Me.ITEM Is Nothing Then
                Me.ITEM = {newitem}
                Return 0
            Else
                Dim _index As Integer = Me.ITEM.Length
                ReDim Preserve Me.ITEM(_index)

                Me.ITEM(_index) = newitem
                Return _index
            End If

        End Function

        Public Function RemoveItem(itemvalue As String) As Boolean
            Dim _result = From c In Me.ITEM Where (Not c.value = itemvalue) Select c
            If _result.Count = ITEM.Count Then Return False
            Me.ITEM = _result.ToArray
            Return True
        End Function

        ''' <summary>
        ''' заменит значение
        ''' </summary>
        ''' <param name="oldvalue"></param>
        ''' <param name="newvalue"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function ResetItem(oldvalue As String, newvalue As String) As Boolean
            Dim _result = (From c In Me.ITEM Where c.value = oldvalue Select c).FirstOrDefault
            If _result Is Nothing Then Return False
            _result.value = newvalue
            Return True
        End Function
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1"), _
     System.SerializableAttribute(), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)> _
    Partial Public Class AUCTIONDATAAGENTFIELDITEM
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property value As String

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property order As Byte

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()> _
        Public Property agentID As String

        '''<remarks/>
        <System.Xml.Serialization.XmlIgnoreAttribute()> _
        Public agentIDSpecified As Boolean

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
End Namespace
